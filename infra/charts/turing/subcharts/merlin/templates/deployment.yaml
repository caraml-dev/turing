apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "merlin.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "merlin.name" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    helm.sh/chart: {{ include "merlin.chart" . }}
    app.kubernetes.io/name: {{ include "merlin.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}    
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "merlin.name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 4
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "merlin.name" . }}
        release: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "{{ .Values.service.internalPort }}"
    spec:
      {{- if and .Values.vault.enabled .Values.environmentConfigs }}
      initContainers:
        {{- range $cluster := .Values.environmentConfigs }}
        - name: "vault-dummy-{{ $cluster.cluster }}-cluster-creds"
          image: curlimages/curl:latest
          command: ['/bin/sh', '-c']
          args:
            - |
              curl --fail -v \
                -H "X-Vault-Token: root" \
                -d '{"master_ip": "kubernetes:443", "certs":"", "client_certificate":"","client_key":""}' \
                "{{ template "merlin.vault.address" $ }}/v1/secret/{{ $cluster.cluster }}"
        {{- end }}
      {{- end }}
      containers:
      - name: merlin
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: /v1/internal/live
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /v1/internal/ready
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        env:
          - name: ENVIRONMENT
            value: "{{ .Values.environment }}"
          - name: PORT
            value: "{{ .Values.service.internalPort }}"
          - name: DATABASE_HOST
            value: {{ template "merlin.db.host" . }}
          - name: DATABASE_USER
            value: "{{ .Values.postgresql.auth.username }}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "merlin.postgresql.name" . }}
                key: password
          - name: DATABASE_NAME
            value: "{{ .Values.postgresql.auth.database }}"
          - name: VAULT_ADDRESS
            valueFrom:
              secretKeyRef:
                name: {{ template "merlin.vault.secretName" . }}
                key: vault-address
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "merlin.vault.secretName" . }}
                key: vault-token
          - name: DEPLOYMENT_CONFIG_PATH
            value: "/opt/config/environment.yaml"
          {{ if .Values.sentry.enabled }}
          - name: SENTRY_ENABLED
            value: "{{ .Values.sentry.enabled }}"
          - name: SENTRY_DSN
            value: "{{ .Values.sentry.dsn }}"
          {{- end }}
          - name: NEWRELIC_ENABLED
            value: "{{ .Values.newrelic.enabled }}"
          {{- if .Values.newrelic.enabled }}
          - name: NEWRELIC_APPNAME
            value: "{{ .Values.newrelic.appname }}"
          - name: NEWRELIC_LICENSE
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.newrelic.licenseSecretName }}"
                key: key
          - name: NEWRELIC_IGNORESTATUSCODES
            value: "400,401,403,404,405,412"
          {{- end }}
          - name: AUTHORIZATION_ENABLED
            value: "{{ .Values.authorization.enabled }}"
          {{- if .Values.authorization.enabled }}
          - name: AUTHORIZATION_SERVER_URL
            value: "{{ .Values.authorization.serverUrl }}"
          {{- end }}
          - name: MLP_API_HOST
            value: {{ include "merlin.tplValue" ( dict "value" .Values.mlpApi.apiHost "context" . ) }}
          - name: MLP_API_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: {{ template "merlin.fullname" . }}-secrets
                key: mlp-encryption-key
          {{- if .Values.gcpServiceAccount }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /etc/gcp_service_account/service-account.json
          {{- end }}
          {{ include "merlin.alerts.envVars" . | nindent 10 -}}
          {{ include "merlin.imageBuilder.envVars" . | nindent 10 -}}
          {{ include "merlin.monitoring.envVars" . | nindent 10 -}}
          {{ include "merlin.ui.envVars" . | nindent 10 }}
        volumeMounts:
        - mountPath: /opt/config
          name: config
        {{- if .Values.gcpServiceAccount }}
        - name: gcp-service-account
          mountPath: "/etc/gcp_service_account"
          readOnly: true
        {{- end }}
      {{- if .Values.swagger.enabled }}
      - name: swagger-ui
        image: "swaggerapi/swagger-ui:{{ .Values.swagger.image.tag }}"
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: {{ .Values.swagger.service.internalPort }}
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        env:
          - name: LAYOUT
            value: "BaseLayout"
          - name: SWAGGER_JSON
            value: "/app/swagger.yaml"
          - name: PORT
            value: "{{ .Values.swagger.service.internalPort }}"
          - name: API_HOST
            value: "{{ .Values.swagger.apiHost }}"
          - name: BASE_PATH
            value: "{{ .Values.swagger.basePath }}"
        command: ['sh', '-c']
        args:
          - |
            mkdir /app
            echo "Fetching swagger configuration from http://127.0.0.1:{{ .Values.service.internalPort }}/swagger.yaml..."
            until $$(wget -O $${SWAGGER_JSON} --tries 1 --timeout 1 http://127.0.0.1:{{ .Values.service.internalPort }}/swagger.yaml); do
              printf '.'
              sleep 10
            done
            echo "Update Swagger config..."
            sed -r -i 's/^(\s*)(host\s*:.*$$)/\host: "'$${API_HOST}'"/' $${SWAGGER_JSON}
            sed -r -i 's#^(\s*)(basePath\s*:.*$$)#\basePath: "'$${BASE_PATH}'"#' $${SWAGGER_JSON}
            echo "Running Swagger UI..."
            /usr/share/nginx/run.sh
      {{- end }}

      volumes:
      - name: config
        configMap:
          name: {{ template "merlin.fullname" . }}-environments
      {{- if .Values.gcpServiceAccount }}
      - name: gcp-service-account
        secret:
          secretName: {{ .Values.gcpServiceAccount.secretName }}
          items:
            - key: {{ .Values.gcpServiceAccount.secretKey }}
              path: service-account.json
      {{- end }}

{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
{{- end }}

{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
