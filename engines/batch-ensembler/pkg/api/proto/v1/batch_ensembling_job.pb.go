// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: api/proto/v1/batch_ensembling_job.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a kind of the batch job
type BatchEnsemblingJob_JobKind int32

const (
	BatchEnsemblingJob_BatchEnsemblingJob BatchEnsemblingJob_JobKind = 0
)

// Enum value maps for BatchEnsemblingJob_JobKind.
var (
	BatchEnsemblingJob_JobKind_name = map[int32]string{
		0: "BatchEnsemblingJob",
	}
	BatchEnsemblingJob_JobKind_value = map[string]int32{
		"BatchEnsemblingJob": 0,
	}
)

func (x BatchEnsemblingJob_JobKind) Enum() *BatchEnsemblingJob_JobKind {
	p := new(BatchEnsemblingJob_JobKind)
	*p = x
	return p
}

func (x BatchEnsemblingJob_JobKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchEnsemblingJob_JobKind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v1_batch_ensembling_job_proto_enumTypes[0].Descriptor()
}

func (BatchEnsemblingJob_JobKind) Type() protoreflect.EnumType {
	return &file_api_proto_v1_batch_ensembling_job_proto_enumTypes[0]
}

func (x BatchEnsemblingJob_JobKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchEnsemblingJob_JobKind.Descriptor instead.
func (BatchEnsemblingJob_JobKind) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{0, 0}
}

type Dataset_DatasetType int32

const (
	Dataset_BQ Dataset_DatasetType = 0
)

// Enum value maps for Dataset_DatasetType.
var (
	Dataset_DatasetType_name = map[int32]string{
		0: "BQ",
	}
	Dataset_DatasetType_value = map[string]int32{
		"BQ": 0,
	}
)

func (x Dataset_DatasetType) Enum() *Dataset_DatasetType {
	p := new(Dataset_DatasetType)
	*p = x
	return p
}

func (x Dataset_DatasetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataset_DatasetType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v1_batch_ensembling_job_proto_enumTypes[1].Descriptor()
}

func (Dataset_DatasetType) Type() protoreflect.EnumType {
	return &file_api_proto_v1_batch_ensembling_job_proto_enumTypes[1]
}

func (x Dataset_DatasetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataset_DatasetType.Descriptor instead.
func (Dataset_DatasetType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{4, 0}
}

// Data type of the expected ensembling results. Can be either
// a primitive type (one of double, float, int, long or string)
// or an array of primitives
type Ensembler_ResultType int32

const (
	Ensembler_DOUBLE  Ensembler_ResultType = 0
	Ensembler_FLOAT   Ensembler_ResultType = 1
	Ensembler_INTEGER Ensembler_ResultType = 2
	Ensembler_LONG    Ensembler_ResultType = 3
	Ensembler_STRING  Ensembler_ResultType = 4
	Ensembler_ARRAY   Ensembler_ResultType = 10
)

// Enum value maps for Ensembler_ResultType.
var (
	Ensembler_ResultType_name = map[int32]string{
		0:  "DOUBLE",
		1:  "FLOAT",
		2:  "INTEGER",
		3:  "LONG",
		4:  "STRING",
		10: "ARRAY",
	}
	Ensembler_ResultType_value = map[string]int32{
		"DOUBLE":  0,
		"FLOAT":   1,
		"INTEGER": 2,
		"LONG":    3,
		"STRING":  4,
		"ARRAY":   10,
	}
)

func (x Ensembler_ResultType) Enum() *Ensembler_ResultType {
	p := new(Ensembler_ResultType)
	*p = x
	return p
}

func (x Ensembler_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ensembler_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v1_batch_ensembling_job_proto_enumTypes[2].Descriptor()
}

func (Ensembler_ResultType) Type() protoreflect.EnumType {
	return &file_api_proto_v1_batch_ensembling_job_proto_enumTypes[2]
}

func (x Ensembler_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ensembler_ResultType.Descriptor instead.
func (Ensembler_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{6, 0}
}

type Sink_SinkType int32

const (
	// Output results to stdout. For testing only
	Sink_CONSOLE Sink_SinkType = 0
	// Writes results into a Google BQ table
	Sink_BQ Sink_SinkType = 1
)

// Enum value maps for Sink_SinkType.
var (
	Sink_SinkType_name = map[int32]string{
		0: "CONSOLE",
		1: "BQ",
	}
	Sink_SinkType_value = map[string]int32{
		"CONSOLE": 0,
		"BQ":      1,
	}
)

func (x Sink_SinkType) Enum() *Sink_SinkType {
	p := new(Sink_SinkType)
	*p = x
	return p
}

func (x Sink_SinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sink_SinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v1_batch_ensembling_job_proto_enumTypes[3].Descriptor()
}

func (Sink_SinkType) Type() protoreflect.EnumType {
	return &file_api_proto_v1_batch_ensembling_job_proto_enumTypes[3]
}

func (x Sink_SinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sink_SinkType.Descriptor instead.
func (Sink_SinkType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{7, 0}
}

// See: https://spark.apache.org/docs/latest/api/java/index.html?org/apache/spark/sql/SaveMode.html
type Sink_SaveMode int32

const (
	Sink_ERRORIFEXISTS Sink_SaveMode = 0
	Sink_OVERWRITE     Sink_SaveMode = 1
	Sink_APPEND        Sink_SaveMode = 2
	Sink_IGNORE        Sink_SaveMode = 3
)

// Enum value maps for Sink_SaveMode.
var (
	Sink_SaveMode_name = map[int32]string{
		0: "ERRORIFEXISTS",
		1: "OVERWRITE",
		2: "APPEND",
		3: "IGNORE",
	}
	Sink_SaveMode_value = map[string]int32{
		"ERRORIFEXISTS": 0,
		"OVERWRITE":     1,
		"APPEND":        2,
		"IGNORE":        3,
	}
)

func (x Sink_SaveMode) Enum() *Sink_SaveMode {
	p := new(Sink_SaveMode)
	*p = x
	return p
}

func (x Sink_SaveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sink_SaveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_v1_batch_ensembling_job_proto_enumTypes[4].Descriptor()
}

func (Sink_SaveMode) Type() protoreflect.EnumType {
	return &file_api_proto_v1_batch_ensembling_job_proto_enumTypes[4]
}

func (x Sink_SaveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sink_SaveMode.Descriptor instead.
func (Sink_SaveMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{7, 1}
}

// Represents a specification of the batch ensembling job
type BatchEnsemblingJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the job specification
	// NOTE: currently not in use
	Version string                     `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Kind    BatchEnsemblingJob_JobKind `protobuf:"varint,2,opt,name=kind,proto3,enum=turing.batch.spec.BatchEnsemblingJob_JobKind" json:"kind,omitempty"`
	// Job's metadata
	Metadata *BatchEnsemblingJobMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Job's configuration
	Spec *BatchEnsemblingJobSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *BatchEnsemblingJob) Reset() {
	*x = BatchEnsemblingJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsemblingJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsemblingJob) ProtoMessage() {}

func (x *BatchEnsemblingJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsemblingJob.ProtoReflect.Descriptor instead.
func (*BatchEnsemblingJob) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{0}
}

func (x *BatchEnsemblingJob) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BatchEnsemblingJob) GetKind() BatchEnsemblingJob_JobKind {
	if x != nil {
		return x.Kind
	}
	return BatchEnsemblingJob_BatchEnsemblingJob
}

func (x *BatchEnsemblingJob) GetMetadata() *BatchEnsemblingJobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BatchEnsemblingJob) GetSpec() *BatchEnsemblingJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Holds necessary metadata of the job
type BatchEnsemblingJobMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Unstructured key-value map to store an arbitrary job metadata
	//
	// The primary use of the annotations is to tweak Spark context
	// and Hadoop configuration.
	//
	// Annotations with keys that start with `spark/` prefix are
	// passed into spark context configuration.
	// Example:
	//    spark/spark.jars:          "https://storage.googleapis.com/hadoop-lib/gcs/gcs-connector-hadoop2-2.0.1.jar"
	//    spark/spark.jars.packages: "com.google.cloud.spark:spark-bigquery-with-dependencies_2.12:0.19.1"
	//
	// Annotations with keys that start with `hadoopConfiguration/`
	// prefix are passed into Hadoop configuration of the Spark context
	// Example:
	//    hadoopConfiguration/fs.gs.impl: "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
	//
	// The full list of Spark and Hadoop config keys can be found at
	// https://spark.apache.org/docs/latest/configuration.html#available-properties
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchEnsemblingJobMetadata) Reset() {
	*x = BatchEnsemblingJobMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsemblingJobMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsemblingJobMetadata) ProtoMessage() {}

func (x *BatchEnsemblingJobMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsemblingJobMetadata.ProtoReflect.Descriptor instead.
func (*BatchEnsemblingJobMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{1}
}

func (x *BatchEnsemblingJobMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchEnsemblingJobMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Represents a Ensembling job configuration
type BatchEnsemblingJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds the information about the source of the input features.
	// Input features could be any arbitrary properties of the input
	// dataset, e.g. user_id, transaction_datetime etc.
	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Holds the key-value mapping between the ID of the model and
	// the source of the predictions, produced by this model
	Predictions map[string]*PredictionSource `protobuf:"bytes,2,rep,name=predictions,proto3" json:"predictions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Holds the configuration of the user-defined ensembler
	Ensembler *Ensembler `protobuf:"bytes,3,opt,name=ensembler,proto3" json:"ensembler,omitempty"`
	// Holds the configuration of the ensembling results sink
	Sink *Sink `protobuf:"bytes,4,opt,name=sink,proto3" json:"sink,omitempty"`
}

func (x *BatchEnsemblingJobSpec) Reset() {
	*x = BatchEnsemblingJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEnsemblingJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEnsemblingJobSpec) ProtoMessage() {}

func (x *BatchEnsemblingJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEnsemblingJobSpec.ProtoReflect.Descriptor instead.
func (*BatchEnsemblingJobSpec) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{2}
}

func (x *BatchEnsemblingJobSpec) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BatchEnsemblingJobSpec) GetPredictions() map[string]*PredictionSource {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *BatchEnsemblingJobSpec) GetEnsembler() *Ensembler {
	if x != nil {
		return x.Ensembler
	}
	return nil
}

func (x *BatchEnsemblingJobSpec) GetSink() *Sink {
	if x != nil {
		return x.Sink
	}
	return nil
}

// Represents a configuration of a data source, together with
// the information about how this data can be joined with other
// data sources
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds a configuration of the dataset
	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// List of columns, to be used to join this data source with
	// prediction data sources.
	//
	// NOTE: The cardinality of `join_on` list should match the
	// cardinality of `join_on` lists in all sources with predictions
	JoinOn []string `protobuf:"bytes,2,rep,name=join_on,json=joinOn,proto3" json:"join_on,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{3}
}

func (x *Source) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *Source) GetJoinOn() []string {
	if x != nil {
		return x.JoinOn
	}
	return nil
}

// Represents a configuration of a dataset
type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the dataset
	Type Dataset_DatasetType `protobuf:"varint,1,opt,name=type,proto3,enum=turing.batch.spec.Dataset_DatasetType" json:"type,omitempty"`
	// One of the dataset type-specific configurations should be provided
	//
	// Types that are assignable to Config:
	//	*Dataset_BqConfig
	Config isDataset_Config `protobuf_oneof:"config"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{4}
}

func (x *Dataset) GetType() Dataset_DatasetType {
	if x != nil {
		return x.Type
	}
	return Dataset_BQ
}

func (m *Dataset) GetConfig() isDataset_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Dataset) GetBqConfig() *Dataset_BigQueryDatasetConfig {
	if x, ok := x.GetConfig().(*Dataset_BqConfig); ok {
		return x.BqConfig
	}
	return nil
}

type isDataset_Config interface {
	isDataset_Config()
}

type Dataset_BqConfig struct {
	// If `type` == DatasetType.BQ
	BqConfig *Dataset_BigQueryDatasetConfig `protobuf:"bytes,2,opt,name=bq_config,json=bqConfig,proto3,oneof"`
}

func (*Dataset_BqConfig) isDataset_Config() {}

// Represents a configuration of the data source, that holds
// prediction results of a single model.
//
// It is similar to `Source`, with the only difference, that
// `PredictionSource` also has `columns` property, that holds
// an information about what column(s) in this data source contain
// model predictions
type PredictionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds a configuration of the dataset
	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// List of columns, to be used to join this predictions data
	// with the `Source`, that contains input features
	//
	// NOTE: The cardinality of `join_on` list should match the
	// cardinality of `join_on` list of the `Source`
	JoinOn []string `protobuf:"bytes,2,rep,name=join_on,json=joinOn,proto3" json:"join_on,omitempty"`
	// List of columns from this data source, that contain
	// results of the model inference
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *PredictionSource) Reset() {
	*x = PredictionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionSource) ProtoMessage() {}

func (x *PredictionSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionSource.ProtoReflect.Descriptor instead.
func (*PredictionSource) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{5}
}

func (x *PredictionSource) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *PredictionSource) GetJoinOn() []string {
	if x != nil {
		return x.JoinOn
	}
	return nil
}

func (x *PredictionSource) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Represents a configuration of a user-defined ensembler
type Ensembler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI of the user-defined ensembler, stored as an MLFlow PyFunc model
	// URI can be either local (such as path to a local folder) or remote
	// (Google Storage, AWS S3 location or any other MLFlow-supported artifact locations)
	// More info: https://www.mlflow.org/docs/latest/concepts.html#artifact-locations
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Ensembling results configuration
	Result *Ensembler_Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Ensembler) Reset() {
	*x = Ensembler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ensembler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ensembler) ProtoMessage() {}

func (x *Ensembler) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ensembler.ProtoReflect.Descriptor instead.
func (*Ensembler) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{6}
}

func (x *Ensembler) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Ensembler) GetResult() *Ensembler_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// Represents a configuration of the ensembling results sink
type Sink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the results sink
	Type Sink_SinkType `protobuf:"varint,1,opt,name=type,proto3,enum=turing.batch.spec.Sink_SinkType" json:"type,omitempty"`
	// List of columns (from the input source and ensembling results)
	// that need to be saved in this sink
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Save mode to be used with this sink
	SaveMode Sink_SaveMode `protobuf:"varint,3,opt,name=save_mode,json=saveMode,proto3,enum=turing.batch.spec.Sink_SaveMode" json:"save_mode,omitempty"`
	// One of the type-specific sink configurations
	//
	// Types that are assignable to Config:
	//	*Sink_BqConfig
	Config isSink_Config `protobuf_oneof:"config"`
}

func (x *Sink) Reset() {
	*x = Sink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink) ProtoMessage() {}

func (x *Sink) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink.ProtoReflect.Descriptor instead.
func (*Sink) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{7}
}

func (x *Sink) GetType() Sink_SinkType {
	if x != nil {
		return x.Type
	}
	return Sink_CONSOLE
}

func (x *Sink) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Sink) GetSaveMode() Sink_SaveMode {
	if x != nil {
		return x.SaveMode
	}
	return Sink_ERRORIFEXISTS
}

func (m *Sink) GetConfig() isSink_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Sink) GetBqConfig() *Sink_BigQuerySinkConfig {
	if x, ok := x.GetConfig().(*Sink_BqConfig); ok {
		return x.BqConfig
	}
	return nil
}

type isSink_Config interface {
	isSink_Config()
}

type Sink_BqConfig struct {
	// If `type` == SinkType.BQ
	BqConfig *Sink_BigQuerySinkConfig `protobuf:"bytes,10,opt,name=bq_config,json=bqConfig,proto3,oneof"`
}

func (*Sink_BqConfig) isSink_Config() {}

// Represents a configuration of a BigQuery dataset
type Dataset_BigQueryDatasetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully-qualified BQ table name,
	// e.g `project_name.dataset_name.table_name`
	//
	// NOTE: Either `table` or `query` should be configured
	// If both `table` and `query` are configured, then `query`
	// will take a higher priority
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// List of columns to be selected and used from the `table`.
	// If not provided, then all columns will be used.
	Features []string `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	// BQ's Standard SQL SELECT query to fetch the data to be
	// used as a dataset.
	//
	// If `query` is configured, then these two `options` MUST be set:
	//  – viewsEnabled: "true"
	//  - materializationDataset: <dataset name, where this view will be materialized>
	//
	// NOTE: Either `table` or `query` should be configured
	// If both `table` and `query` are configured, then `query`
	// will take a higher priority
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// List of an extra key-value config options, that is passed
	// into Spark-BQ connector.
	// The full list of supported options can be found here:
	// https://github.com/GoogleCloudDataproc/spark-bigquery-connector#properties
	Options map[string]string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dataset_BigQueryDatasetConfig) Reset() {
	*x = Dataset_BigQueryDatasetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset_BigQueryDatasetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset_BigQueryDatasetConfig) ProtoMessage() {}

func (x *Dataset_BigQueryDatasetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset_BigQueryDatasetConfig.ProtoReflect.Descriptor instead.
func (*Dataset_BigQueryDatasetConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Dataset_BigQueryDatasetConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Dataset_BigQueryDatasetConfig) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Dataset_BigQueryDatasetConfig) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Dataset_BigQueryDatasetConfig) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Represents a configuration of the ensembling result
type Ensembler_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column, that will store the results of ensembling
	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Expected type of ensembling
	Type Ensembler_ResultType `protobuf:"varint,2,opt,name=type,proto3,enum=turing.batch.spec.Ensembler_ResultType" json:"type,omitempty"`
	// only if type is array
	ItemType Ensembler_ResultType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=turing.batch.spec.Ensembler_ResultType" json:"item_type,omitempty"`
}

func (x *Ensembler_Result) Reset() {
	*x = Ensembler_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ensembler_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ensembler_Result) ProtoMessage() {}

func (x *Ensembler_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ensembler_Result.ProtoReflect.Descriptor instead.
func (*Ensembler_Result) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Ensembler_Result) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *Ensembler_Result) GetType() Ensembler_ResultType {
	if x != nil {
		return x.Type
	}
	return Ensembler_DOUBLE
}

func (x *Ensembler_Result) GetItemType() Ensembler_ResultType {
	if x != nil {
		return x.ItemType
	}
	return Ensembler_DOUBLE
}

// Represents a configuration of a BQ sink
type Sink_BigQuerySinkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully-qualified BQ table name
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Spark BQ connector writes data to GCS first, before loading it into BQ
	// `staging_bucket` should contain the name of a GCS bucket, where the
	// data will be temporarily stored at
	StagingBucket string `protobuf:"bytes,2,opt,name=staging_bucket,json=stagingBucket,proto3" json:"staging_bucket,omitempty"`
	// List of an extra key-value config options, that is passed
	// into Spark-BQ connector.
	// The full list of supported options can be found here:
	// https://github.com/GoogleCloudDataproc/spark-bigquery-connector#properties
	Options map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Sink_BigQuerySinkConfig) Reset() {
	*x = Sink_BigQuerySinkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink_BigQuerySinkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink_BigQuerySinkConfig) ProtoMessage() {}

func (x *Sink_BigQuerySinkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_v1_batch_ensembling_job_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink_BigQuerySinkConfig.ProtoReflect.Descriptor instead.
func (*Sink_BigQuerySinkConfig) Descriptor() ([]byte, []int) {
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Sink_BigQuerySinkConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Sink_BigQuerySinkConfig) GetStagingBucket() string {
	if x != nil {
		return x.StagingBucket
	}
	return ""
}

func (x *Sink_BigQuerySinkConfig) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_api_proto_v1_batch_ensembling_job_proto protoreflect.FileDescriptor

var file_api_proto_v1_batch_ensembling_job_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9e, 0x02, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x21, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x10, 0x00, 0x22, 0xd2, 0x01,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x60, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf7, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x09, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x69, 0x6e,
	0x6b, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x1a, 0x63, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6a,
	0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x22, 0xae, 0x03, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x09, 0x62, 0x71, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x62, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf4,
	0x01, 0x0a, 0x15, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x57, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x51, 0x10, 0x00, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7b, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0xac, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x45,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x51, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x10, 0x0a, 0x22, 0xb4, 0x04, 0x0a, 0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x69,
	0x6e, 0x6b, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x71,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x62, 0x71, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe0, 0x01, 0x0a, 0x12, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53,
	0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x08, 0x53, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x51, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x61, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x46,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x72, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_v1_batch_ensembling_job_proto_rawDescOnce sync.Once
	file_api_proto_v1_batch_ensembling_job_proto_rawDescData = file_api_proto_v1_batch_ensembling_job_proto_rawDesc
)

func file_api_proto_v1_batch_ensembling_job_proto_rawDescGZIP() []byte {
	file_api_proto_v1_batch_ensembling_job_proto_rawDescOnce.Do(func() {
		file_api_proto_v1_batch_ensembling_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_v1_batch_ensembling_job_proto_rawDescData)
	})
	return file_api_proto_v1_batch_ensembling_job_proto_rawDescData
}

var file_api_proto_v1_batch_ensembling_job_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_proto_v1_batch_ensembling_job_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_proto_v1_batch_ensembling_job_proto_goTypes = []interface{}{
	(BatchEnsemblingJob_JobKind)(0),       // 0: turing.batch.spec.BatchEnsemblingJob.JobKind
	(Dataset_DatasetType)(0),              // 1: turing.batch.spec.Dataset.DatasetType
	(Ensembler_ResultType)(0),             // 2: turing.batch.spec.Ensembler.ResultType
	(Sink_SinkType)(0),                    // 3: turing.batch.spec.Sink.SinkType
	(Sink_SaveMode)(0),                    // 4: turing.batch.spec.Sink.SaveMode
	(*BatchEnsemblingJob)(nil),            // 5: turing.batch.spec.BatchEnsemblingJob
	(*BatchEnsemblingJobMetadata)(nil),    // 6: turing.batch.spec.BatchEnsemblingJobMetadata
	(*BatchEnsemblingJobSpec)(nil),        // 7: turing.batch.spec.BatchEnsemblingJobSpec
	(*Source)(nil),                        // 8: turing.batch.spec.Source
	(*Dataset)(nil),                       // 9: turing.batch.spec.Dataset
	(*PredictionSource)(nil),              // 10: turing.batch.spec.PredictionSource
	(*Ensembler)(nil),                     // 11: turing.batch.spec.Ensembler
	(*Sink)(nil),                          // 12: turing.batch.spec.Sink
	nil,                                   // 13: turing.batch.spec.BatchEnsemblingJobMetadata.AnnotationsEntry
	nil,                                   // 14: turing.batch.spec.BatchEnsemblingJobSpec.PredictionsEntry
	(*Dataset_BigQueryDatasetConfig)(nil), // 15: turing.batch.spec.Dataset.BigQueryDatasetConfig
	nil,                                   // 16: turing.batch.spec.Dataset.BigQueryDatasetConfig.OptionsEntry
	(*Ensembler_Result)(nil),              // 17: turing.batch.spec.Ensembler.Result
	(*Sink_BigQuerySinkConfig)(nil),       // 18: turing.batch.spec.Sink.BigQuerySinkConfig
	nil,                                   // 19: turing.batch.spec.Sink.BigQuerySinkConfig.OptionsEntry
}
var file_api_proto_v1_batch_ensembling_job_proto_depIdxs = []int32{
	0,  // 0: turing.batch.spec.BatchEnsemblingJob.kind:type_name -> turing.batch.spec.BatchEnsemblingJob.JobKind
	6,  // 1: turing.batch.spec.BatchEnsemblingJob.metadata:type_name -> turing.batch.spec.BatchEnsemblingJobMetadata
	7,  // 2: turing.batch.spec.BatchEnsemblingJob.spec:type_name -> turing.batch.spec.BatchEnsemblingJobSpec
	13, // 3: turing.batch.spec.BatchEnsemblingJobMetadata.annotations:type_name -> turing.batch.spec.BatchEnsemblingJobMetadata.AnnotationsEntry
	8,  // 4: turing.batch.spec.BatchEnsemblingJobSpec.source:type_name -> turing.batch.spec.Source
	14, // 5: turing.batch.spec.BatchEnsemblingJobSpec.predictions:type_name -> turing.batch.spec.BatchEnsemblingJobSpec.PredictionsEntry
	11, // 6: turing.batch.spec.BatchEnsemblingJobSpec.ensembler:type_name -> turing.batch.spec.Ensembler
	12, // 7: turing.batch.spec.BatchEnsemblingJobSpec.sink:type_name -> turing.batch.spec.Sink
	9,  // 8: turing.batch.spec.Source.dataset:type_name -> turing.batch.spec.Dataset
	1,  // 9: turing.batch.spec.Dataset.type:type_name -> turing.batch.spec.Dataset.DatasetType
	15, // 10: turing.batch.spec.Dataset.bq_config:type_name -> turing.batch.spec.Dataset.BigQueryDatasetConfig
	9,  // 11: turing.batch.spec.PredictionSource.dataset:type_name -> turing.batch.spec.Dataset
	17, // 12: turing.batch.spec.Ensembler.result:type_name -> turing.batch.spec.Ensembler.Result
	3,  // 13: turing.batch.spec.Sink.type:type_name -> turing.batch.spec.Sink.SinkType
	4,  // 14: turing.batch.spec.Sink.save_mode:type_name -> turing.batch.spec.Sink.SaveMode
	18, // 15: turing.batch.spec.Sink.bq_config:type_name -> turing.batch.spec.Sink.BigQuerySinkConfig
	10, // 16: turing.batch.spec.BatchEnsemblingJobSpec.PredictionsEntry.value:type_name -> turing.batch.spec.PredictionSource
	16, // 17: turing.batch.spec.Dataset.BigQueryDatasetConfig.options:type_name -> turing.batch.spec.Dataset.BigQueryDatasetConfig.OptionsEntry
	2,  // 18: turing.batch.spec.Ensembler.Result.type:type_name -> turing.batch.spec.Ensembler.ResultType
	2,  // 19: turing.batch.spec.Ensembler.Result.item_type:type_name -> turing.batch.spec.Ensembler.ResultType
	19, // 20: turing.batch.spec.Sink.BigQuerySinkConfig.options:type_name -> turing.batch.spec.Sink.BigQuerySinkConfig.OptionsEntry
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_proto_v1_batch_ensembling_job_proto_init() }
func file_api_proto_v1_batch_ensembling_job_proto_init() {
	if File_api_proto_v1_batch_ensembling_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsemblingJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsemblingJobMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEnsemblingJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ensembler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset_BigQueryDatasetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ensembler_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_v1_batch_ensembling_job_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink_BigQuerySinkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_v1_batch_ensembling_job_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Dataset_BqConfig)(nil),
	}
	file_api_proto_v1_batch_ensembling_job_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Sink_BqConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_v1_batch_ensembling_job_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_v1_batch_ensembling_job_proto_goTypes,
		DependencyIndexes: file_api_proto_v1_batch_ensembling_job_proto_depIdxs,
		EnumInfos:         file_api_proto_v1_batch_ensembling_job_proto_enumTypes,
		MessageInfos:      file_api_proto_v1_batch_ensembling_job_proto_msgTypes,
	}.Build()
	File_api_proto_v1_batch_ensembling_job_proto = out.File
	file_api_proto_v1_batch_ensembling_job_proto_rawDesc = nil
	file_api_proto_v1_batch_ensembling_job_proto_goTypes = nil
	file_api_proto_v1_batch_ensembling_job_proto_depIdxs = nil
}
