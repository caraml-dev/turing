name: Turing CI

on:
  push:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  test-api:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/api/.go
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: turing
          POSTGRES_USER: turing-admin
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: api/.go/pkg/mod/
          key: |
            gomod-${{ hashFiles('api/go.mod') }}
          restore-keys: gomod-

      - name: Run test
        working-directory: api
        env:
          DATABASE_HOST: localhost
          DATABASE_NAME: turing
          DATABASE_USER: turing-admin
          DATABASE_PASSWORD: secret
        run: make test

      - name: Lint code
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41.1
          working-directory: api
          skip-go-installation: true
          args: --timeout 3m --verbose

  test-engines-router:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: engines/router
    env:
      GOPATH: ${{ github.workspace }}/engines/router/.go
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: engines/router/.go/pkg/mod/
          key: |
            gomod-${{ hashFiles('engines/router/go.mod') }}
          restore-keys: gomod-

      - name: Run test
        run: make test

      - name: Run Benchmark
        run: make benchmark

      - name: Lint code
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41.1
          working-directory: engines/router
          skip-go-installation: true
          args: --verbose

  test-engines-experiment:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/engines/experiment/.go
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: engines/experiment/.go/pkg/mod/
          key: |
            gomod-${{ hashFiles('engines/experiment/go.mod') }}
          restore-keys: gomod-

      - name: Run test
        working-directory: engines/experiment
        run: make test

      - name: Lint code
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41.1
          working-directory: engines/experiment
          skip-go-installation: true
          args: --verbose

  build-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node 14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache Dependencies
        uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: |
            ${{ runner.os }}-modules-${{ hashFiles('ui/yarn.lock') }}
          restore-keys: ${{ runner.os }}-modules-

      - name: Install
        run: yarn install --network-concurrency 1

      - name: Lint code
        run: yarn lint

      - name: Build UI
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: yarn build

      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: turing-ui-dist
          path: ui/build/

  build-swagger-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api/api
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build static Swagger UI dist
        run: make swagger-ui-dist

      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: swagger-ui-dist
          path: api/api/swagger-ui-dist/

  publish-api:
    runs-on: ubuntu-latest
    needs:
      - test-api
      - test-engines-experiment
      - test-engines-router
    outputs:
      TuringApiImage: ${{ steps.build-image.outputs.TuringApiImage }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Cache vendor dependencies
        uses: actions/cache@v2
        with:
          path: api
          key: |
            ${{ runner.os }}-vendor-${{ hashFiles('api/go.mod') }}
          restore-keys: ${{ runner.os }}-vendor-

      - name: Build Docker image
        id: build-image
        working-directory: api
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}
        run: |
          set -o pipefail
          make build-image | tee output.log
          make build-image | tee output.log
          echo "::set-output name=TuringApiImage::$(sed -n 's%Building docker image: \(.*\)%\1%p' output.log)"

      - name: Publish Docker Image
        run: docker push ${{ steps.build-image.outputs.TuringApiImage }}

  publish-router:
    runs-on: ubuntu-latest
    needs:
      - test-engines-router
    outputs:
      TuringRouterImage: ${{ steps.build-image.outputs.TuringRouterImage }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Cache vendor dependencies
        uses: actions/cache@v2
        with:
          path: engines/router/vendor
          key: |
            ${{ runner.os }}-vendor-${{ hashFiles('engines/router/go.mod') }}
          restore-keys: ${{ runner.os }}-vendor-

      - name: Build Docker image
        id: build-image
        working-directory: engines/router
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository }}
        run: |
          set -o pipefail
          make build-image | tee output.log
          echo "::set-output name=TuringRouterImage::$(sed -n 's%Building docker image: \(.*\)%\1%p' output.log)"

      - name: Publish Docker Image
        run: docker push ${{ steps.build-image.outputs.TuringRouterImage }}

  test-e2e:
    runs-on: ubuntu-latest
    environment:
      name: e2e
    needs:
      - publish-api
      - publish-router
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Set variables
        id: variables
        run: |
          IFS=$'\t' read -r registry repositry tag \
            < <(perl -pe 's%^(((?:[a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])(?:(?:\.(?:[a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9]))+)?(?::[0-9]+)?/)?([a-z0-9]+(?:(?:(?:[._]|__|[-]*)[a-z0-9]+)+)?(?:(?:/[a-z0-9]+(?:(?:(?:[._]|__|[-]*)[a-z0-9]+)+)?)+)?))(?::([\w][\w.-]{0,127}))?(?:@([a-z][a-z0-9]*(?:[-_+.][a-z][a-z0-9]*)*[:][[:xdigit:]]{32,}))?$%\2\t\3\t\4%ig' \
                  <<< ${{ needs.publish-api.outputs.TuringApiImage }}
               )
          echo "::set-output name=TuringImageRegistry::${registry}"
          echo "::set-output name=TuringImageRepository::${repositry}"
          echo "::set-output name=TuringImageTag::${tag:-latest}"

      - name: Setup test infra
        working-directory: test/e2e
        env:
          CONCURRENT_NONINTERACTIVE: "1"
        run: |
          set -e
          source setup-infra.sh

          turing_image_registry=${{ steps.variables.outputs.TuringImageRegistry }} \
          turing_image_repository=${{ steps.variables.outputs.TuringImageRepository }} \
          turing_image_tag=${{ steps.variables.outputs.TuringImageTag }} \
          turing_router_image=${{ needs.publish-router.outputs.TuringRouterImage }} \
            concurrent \
              - "install_e2e_tools" install_e2e_tools \
              --and-then \
              - "install_kubernetes_kind_cluster" install_kubernetes_kind_cluster \
              --and-then \
              - "install_istio" install_istio \
              --and-then \
              - "install_knative_serving_with_istio_controller" install_knative_serving_with_istio_controller \
              - "install_mlp" install_mlp \
              - "install_vault" install_vault \
              --and-then \
              - "install_merlin" install_merlin \
              - "install_turing" install_turing

      - name: Run test
        working-directory: api
        env:
          TEST_ID: "1"
          MOCKSERVER_ENDPOINT: http://mockserver
          API_BASE_PATH: http://turing.127.0.0.1.nip.io/v1
          MODEL_CLUSTER_NAME: kind
          PROJECT_ID: "1"
          PROJECT_NAME: default
          KUBECONFIG_USE_LOCAL: "true"
        run: go test -v -parallel=2 ./e2e/... -tags=e2e -run TestEndToEnd

  publish-app:
    runs-on: ubuntu-latest
    needs:
      - build-ui
      - build-swagger-ui
      - publish-api
      - test-e2e
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Download Turing UI Dist
        uses: actions/download-artifact@v2
        with:
          name: turing-ui-dist
          path: ui/build

      - name: Download Swagger UI Dist
        uses: actions/download-artifact@v2
        with:
          name: swagger-ui-dist
          path: api/api/swagger-ui-dist

      - name: Build Docker image
        id: build-image
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          TURING_API_IMAGE: ${{ needs.publish-api.outputs.TuringApiImage }}
        run: |
          set -o pipefail
          make build-image | tee output.log
          echo "::set-output name=TuringImage::$(sed -n 's%Building docker image: \(.*\)%\1%p' output.log)"

      - name: Publish Docker Image
        run: docker push ${{ steps.build-image.outputs.TuringImage }}

