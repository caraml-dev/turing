openapi: 3.0.3
info:
  title: Endpoints and schemas of Turing Routers
  version: 0.0.1

.tags: &tags
  - "Router"

.id: &id
  type: "integer"
  format: "int32"

.timeout: &timeout
  type: "string"
  pattern: '^[0-9]+(ms|s|m|h)$'

paths:
  "/projects/{project_id}/routers":
    get:
      tags: *tags
      summary: "List routers belonging to project"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project to retrieve routers from"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RouterDetails"
        400:
          description: "Invalid project_id"
        500:
          description: "Error retrieving routers"
    post:
      tags: *tags
      summary: "Create new router in project"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project to save router"
          schema:
            <<: *id
          required: true
      requestBody:
        description: "router configuration to save"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouterConfig"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterDetails"
        400:
          description: "Invalid project_id or router configuration"
        500:
          description: "Unable to save configuration"
  "/projects/{project_id}/routers/{router_id}":
    get:
      tags: *tags
      summary: "Get router belonging to project by ID"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project to retrieve routers from"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterDetails"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router found"
    put:
      tags: *tags
      summary: "Update router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project of the router"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to update"
          schema:
            <<: *id
          required: true
      requestBody:
        description: "router configuration to save"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouterConfig"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterDetails"
        400:
          description: "Invalid project_id, router_id or router configuration"
        500:
          description: "Unable to save configuration"

    delete:
      tags: *tags
      summary: "Delete router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project of the router"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to delete"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterId"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "Router not found"
        500:
          description: "Unable to delete router"

  "/projects/{project_id}/routers/{router_id}/deploy":
    post:
      tags: *tags
      summary: "Deploy the current router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          schema:
            <<: *id
          required: true
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterIdAndVersion"
        400:
          description: "Invalid project_id, router_id or deploy request"
        404:
          description: "No router version found"

  "/projects/{project_id}/routers/{router_id}/undeploy":
    post:
      tags: *tags
      summary: "Undeploy router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to undeploy"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterIdObject"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "Router not found"
        500:
          description: "Error undeploying router version"

  "/projects/{project_id}/routers/{router_id}/versions":
    get:
      tags: *tags
      summary: "List router config versions"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project to retrieve routers from"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RouterVersion"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router versions found"
    post:
      tags: *tags
      summary: "Create router version without deploying it"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project of the router"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to create a new version for"
          schema:
            <<: *id
          required: true
      requestBody:
        description: "router configuration to save"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouterVersionConfig"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterVersion"
        400:
          description: "Invalid project_id, router_id or router configuration"
        500:
          description: "Unable to save configuration"

  "/projects/{project_id}/routers/{router_id}/versions/{version}":
    get:
      tags: *tags
      summary: "Get specific router config version"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project to retrieve routers from"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to be retrieved"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterVersion"
        400:
          description: "Invalid project_id, router_id or version_id"
        404:
          description: "No router version found"

    delete:
      tags: *tags
      summary: "Delete router version"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project of the router"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to delete"
          schema:
            <<: *id
          required: true
      responses:
        202:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterIdAndVersion"
        400:
          description: "Invalid project_id, router_id or version"
        404:
          description: "Router version not found"
        500:
          description: "Unable to delete router version"

  "/projects/{project_id}/routers/{router_id}/versions/{version}/deploy":
    post:
      tags: *tags
      summary: "Deploy specified version of router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to be deployed"
          schema:
            <<: *id
          required: true
      responses:
        202:
          description: "Accepted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterIdAndVersion"
        400:
          description: "Invalid project_id, router_id, version_id or deploy request"
        404:
          description: "No router version found"

  "/projects/{project_id}/routers/{router_id}/events":
    get:
      tags: *tags
      summary: "Get deployment events associated with this router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          schema:
            <<: *id
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          schema:
            <<: *id
          required: true
      responses:
        200:
          description: "Get events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouterEvents"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router version found"

components:
  schemas:
    RouterId:
      $ref: "./common.yaml#/components/schemas/IdObject"

    RouterIdObject:
      type: object
      properties:
        router_id:
          $ref: "common.yaml#/components/schemas/Id"

    RouterEvents:
      type: object
      properties:
        events:
          type: "array"
          items:
            $ref: "#/components/schemas/Event"

    RouterIdAndVersion:
      type: object
      properties:
        router_id:
          $ref: "common.yaml#/components/schemas/Id"
        version:
          $ref: "common.yaml#/components/schemas/Id"

    Router:
      type: "object"
      nullable: true
      properties:
        id:
          $ref: "common.yaml#/components/schemas/Id"
          readOnly: true
        name:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        project_id:
          type: "integer"
        environment_name:
          type: "string"
        endpoint:
          type: "string"
          readOnly: true
        monitoring_url:
          type: "string"
          readOnly: true
        status:
          $ref: "#/components/schemas/RouterStatus"

    RouterDetails:
      allOf:
        - $ref: "#/components/schemas/Router"
        - type: object
          properties:
            config:
              $ref: "#/components/schemas/RouterVersion"

    RouterVersion:
      type: "object"
      properties:
        id:
          $ref: "common.yaml#/components/schemas/Id"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        router:
          $ref: "#/components/schemas/Router"
        version:
          type: "integer"
        status:
          $ref: "#/components/schemas/RouterVersionStatus"
        error:
          type: "string"
        image:
          type: "string"
        routes:
          type: "array"
          items:
            $ref: "#/components/schemas/Route"
        experiment_engine:
          $ref: "experiment-engines.yaml#/components/schemas/ExperimentConfig"
        resource_request:
          $ref: "#/components/schemas/ResourceRequest"
        timeout:
          <<: *timeout
        log_config:
          type: "object"
          properties:
            log_level:
              $ref: "#/components/schemas/LogLevel"
            custom_metrics_enabled:
              type: "boolean"
            fiber_debug_log_enabled:
              type: "boolean"
            jaeger_enabled:
              type: "boolean"
            result_logger_type:
              $ref: "#/components/schemas/ResultLoggerType"
            bigquery_config:
              $ref: "#/components/schemas/BigQueryConfig"
            kafka_config:
              $ref: "#/components/schemas/KafkaConfig"
        enricher:
          $ref: "#/components/schemas/Enricher"
        ensembler:
          $ref: "#/components/schemas/RouterEnsemblerConfig"
        monitoring_url:
          type: "string"
          readOnly: true
        default_route_id:
          type: "string"
        rules:
          type: "array"
          items:
            $ref: "#/components/schemas/TrafficRule"

    ResultLoggerType:
      type: "string"
      enum:
        - "nop"
        - "console"
        - "bigquery"
        - "kafka"
      default: "nop"

    RouterStatus:
      type: "string"
      enum:
        - "deployed"
        - "undeployed"
        - "failed"
        - "pending"
      default: "pending"

    RouterVersionStatus:
      type: "string"
      enum:
        - "deployed"
        - "undeployed"
        - "failed"
        - "pending"
      default: "pending"

    LogLevel:
      type: "string"
      enum:
        - "DEBUG"
        - "INFO"
        - "WARN"
        - "ERROR"

    RouterConfig:
      type: "object"
      required:
        - environment_name
        - name
        - config
      properties:
        environment_name:
          type: "string"
        name:
          type: "string"
          pattern: '^[a-z0-9-]*$'
        config:
          $ref: "#/components/schemas/RouterVersionConfig"

    RouterVersionConfig:
      type: "object"
      required:
        - routes
        - experiment_engine
        - timeout
        - log_config
      properties:
        routes:
          type: "array"
          items:
            $ref: "#/components/schemas/Route"
        rules:
          type: "array"
          items:
            $ref: "#/components/schemas/TrafficRule"
        default_route_id:
          type: "string"
        experiment_engine:
          $ref: "experiment-engines.yaml#/components/schemas/ExperimentConfig"
        resource_request:
          $ref: "#/components/schemas/ResourceRequest"
        timeout:
          <<: *timeout
        log_config:
          type: "object"
          properties:
            result_logger_type:
              $ref: "#/components/schemas/ResultLoggerType"
            bigquery_config:
              $ref: "#/components/schemas/BigQueryConfig"
            kafka_config:
              $ref: "#/components/schemas/KafkaConfig"
        enricher:
          $ref: "#/components/schemas/Enricher"
        ensembler:
          $ref: "#/components/schemas/RouterEnsemblerConfig"

    Route:
      type: "object"
      required:
        - id
        - type
        - endpoint
        - timeout
      properties:
        id:
          type: "string"
        type:
          type: "string"
        endpoint:
          type: "string"
        timeout:
          <<: *timeout
        annotations:
          type: "object"
          nullable: true

    TrafficRule:
      type: "object"
      required:
        - name
        - conditions
        - routes
      properties:
        name:
          type: "string"
        conditions:
          type: "array"
          items:
            $ref: "#/components/schemas/TrafficRuleCondition"
        routes:
          type: "array"
          description: "List of IDs of the routes, that should be activated by this rule"
          items:
            type: "string"

    TrafficRuleCondition:
      type: "object"
      required:
        - field_source
        - field
        - operator
        - values
      properties:
        field_source:
          $ref: "common.yaml#/components/schemas/FieldSource"
        field:
          type: "string"
          description: >
            If `field_source` is `header`, then `field` should contain the name of the request header,
            otherwise, if `field_source` is `payload`, then `field` should be a valid json path
        operator:
          type: "string"
          enum:
            - "in"
        values:
          type: "array"
          items:
            type: "string"

    Enricher:
      type: "object"
      required:
        - image
        - resource_request
        - endpoint
        - timeout
        - port
        - env
      properties:
        id:
          $ref: "common.yaml#/components/schemas/Id"
        image:
          type: "string"
        resource_request:
          $ref: "#/components/schemas/ResourceRequest"
        endpoint:
          type: "string"
        timeout:
          <<: *timeout
        port:
          type: "integer"
        env:
          type: "array"
          items:
            $ref: "common.yaml#/components/schemas/EnvVar"
        service_account:
          type: "string"
          description: >
            (Optional) Name of the secret registered in the current MLP project that contains the Google service account
            JSON key. This secret will be mounted as a file inside the container and the environment variable
            GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
          example: "secret-name-for-google-service-account"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    RouterEnsemblerConfig:
      type: "object"
      required:
        - type
      properties:
        id:
          $ref: "common.yaml#/components/schemas/Id"
          readOnly: true
        type:
          description: "type of ensembler"
          type: "string"
          enum: [ "standard", "docker", "pyfunc"]
        standard_config:
          $ref: "#/components/schemas/EnsemblerStandardConfig"
        docker_config:
          $ref: "#/components/schemas/EnsemblerDockerConfig"
        pyfunc_config:
          $ref: "#/components/schemas/EnsemblerPyfuncConfig"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    EnsemblerStandardConfig:
      description: "ensembler config when ensembler type is standard"
      type: "object"
      nullable: true
      required:
        - "experiment_mappings"
      properties:
        experiment_mappings:
          type: "array"
          items:
            type: "object"
            required:
              - "experiment"
              - "treatment"
              - "route"
            properties:
              experiment:
                description: "experiment name from the configured experiment engine"
                type: "string"
                example: "experiment-1"
              treatment:
                description: "treatment name of the experiment"
                type: "string"
                example: "treatment-1"
              route:
                description: "route id of the routes configured in the router"
                type: "string"
                example: "route-1"

    EnsemblerDockerConfig:
      description: "ensembler config when ensembler type is docker"
      type: "object"
      nullable: true
      required:
        - image
        - resource_request
        - endpoint
        - timeout
        - port
        - env
      properties:
        image:
          type: "string"
          pattern: '^([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*(?::\d{2,5})?\/)?([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*\/)*([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*)(?::[a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*)?$'
        resource_request:
          $ref: "#/components/schemas/ResourceRequest"
        endpoint:
          type: "string"
        timeout:
          <<: *timeout
        port:
          type: "integer"
        env:
          type: "array"
          items:
            $ref: "common.yaml#/components/schemas/EnvVar"
        service_account:
          type: "string"
          description: >
            (Optional) Name of the secret registered in the current MLP project that contains the Google service account
            JSON key. This secret will be mounted as a file inside the container and the environment variable
            GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
          example: "secret-name-for-google-service-account"

    EnsemblerPyfuncConfig:
      description: "ensembler config when ensembler type is pyfunc"
      type: "object"
      nullable: true
      required:
        - project_id
        - ensembler_id
        - resource_request
        - timeout
      properties:
        project_id:
          type: "integer"
        ensembler_id:
          type: "integer"
        resource_request:
          $ref: "#/components/schemas/ResourceRequest"
        timeout:
          <<: *timeout
        env:
          type: "array"
          items:
            $ref: "common.yaml#/components/schemas/EnvVar"

    ResourceRequest:
      type: "object"
      properties:
        min_replica:
          type: "integer"
        max_replica:
          type: "integer"
        cpu_request:
          type: "string"
          pattern: '^(\d{1,3}(\.\d{1,3})?)$|^(\d{2,5}m)$'
        memory_request:
          type: "string"
          pattern: '^\d+(Ei?|Pi?|Ti?|Gi?|Mi?|Ki?)?$'

    BigQueryConfig:
      type: "object"
      nullable: true
      required:
        - table
        - service_account_secret
      properties:
        table:
          type: "string"
          pattern: '^[a-zA-Z][a-zA-Z0-9-]+\.\w+([_]?\w)+\.\w+([_]?\w)+$'
        service_account_secret:
          type: "string"
        batch_load:
          type: "boolean"
          nullable: true

    KafkaConfig:
      type: "object"
      nullable: true
      required:
        - brokers
        - topic
        - serialization_format
      properties:
        brokers:
          type: "string"
          pattern: '^([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+)(,([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+))*$'
          description: Comma-separated list of host and port pairs that are the addresses of the Kafka brokers.
        topic:
          type: "string"
          pattern: '^[A-Za-z0-9_.-]{1,249}$'
        serialization_format:
          type: "string"
          enum:
            - "json"
            - "protobuf"

    Event:
      type: "object"
      properties:
        id:
          $ref: "common.yaml#/components/schemas/Id"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        version:
          type: "integer"
        event_type:
          type: "string"
          enum: [ "info", "error" ]
        stage:
          type: "string"
        message:
          type: "string"