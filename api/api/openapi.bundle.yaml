openapi: 3.0.3
info:
  title: Turing API
  version: 0.0.1
servers:
- url: http://localhost:8080/v1
security:
- bearerAuth: []
paths:
  /projects:
    get:
      description: Projects can be filtered by optional `name` parameter
      parameters:
      - in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: OK
      summary: List existing projects
      tags:
      - Project
  /projects/{project_id}/ensemblers:
    get:
      operationId: ListEnsemblers
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: query
        name: page
        schema:
          default: 1
          type: integer
      - in: query
        name: page_size
        schema:
          default: 10
          type: integer
      - in: query
        name: type
        schema:
          $ref: '#/components/schemas/EnsemblerType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsemblersPaginatedResults'
          description: A JSON object, that represents paginated results response
      summary: Returns a list of ensemblers that belong to the project
      tags:
      - Ensembler
    post:
      operationId: CreateEnsembler
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ensembler'
        description: A JSON object containing information about the ensembler
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ensembler'
          description: A JSON representation of a successfully saved ensembler
      summary: Saves a user-defined ensembler into the project
      tags:
      - Ensembler
  /projects/{project_id}/ensemblers/{ensembler_id}:
    get:
      operationId: GetEnsemblerDetails
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: path
        name: ensembler_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ensembler'
          description: A JSON object representing an instance of the specific type
            of Ensembler
      summary: Returns Ensembler's details by its ID
      tags:
      - Ensembler
    put:
      operationId: UpdateEnsembler
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: path
        name: ensembler_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ensembler'
        description: A JSON object, representing an update to the ensembler
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ensembler'
          description: A JSON object representing an instance of updated Ensembler
      summary: Updates existing Ensembler with the data provided in the payload
      tags:
      - Ensembler
  /projects/{project_id}/jobs:
    get:
      operationId: ListEnsemblingJobs
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: query
        name: page
        schema:
          default: 1
          type: integer
      - in: query
        name: page_size
        schema:
          default: 10
          type: integer
      - in: query
        name: ensembler_id
        schema:
          format: int32
          type: integer
      - in: query
        name: search
        schema:
          type: string
      - explode: true
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/EnsemblerJobStatus'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsemblingJobPaginatedResults'
          description: A JSON object, that represents paginated results response
      summary: Returns a list of ensembling jobs that belong to the project
      tags:
      - Ensembling Job
    post:
      operationId: CreateEnsemblingJob
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnsemblingJob'
        description: A JSON object that contains the configuration of the ensembling
          job
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsemblingJob'
          description: Accepted.
      summary: Submit an Ensembling job.
      tags:
      - Ensembling Job
  /projects/{project_id}/jobs/{job_id}:
    delete:
      operationId: TerminateEnsemblingJob
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: path
        name: job_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdObject'
          description: Accepted.
        "400":
          description: Invalid ensembling job
        "404":
          description: Ensembling job not found
      summary: Terminate an ongoing Ensembling Job.
      tags:
      - Ensembling Job
    get:
      operationId: GetEnsemblingJob
      parameters:
      - in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - in: path
        name: job_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsemblingJob'
          description: A JSON object representing an Ensembling Job
        "404":
          description: Invalid ensembling job
      summary: Get an existing Ensembling job.
      tags:
      - Ensembling Job
  /projects/{project_id}/routers/{router_id}/alerts:
    get:
      parameters:
      - description: id of the project the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router for the alerts
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Alert'
                type: array
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: project_id or router_id not found
        "500":
          description: Error retrieving the alerts for the router
      summary: List alerts for a router
      tags:
      - Alerts
    post:
      parameters:
      - description: id of the project the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router for the alert
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: alert specification
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: project_id or router_id not found
        "500":
          description: Error creating new alert
      summary: Create a new alert for a router
      tags:
      - Alerts
  /projects/{project_id}/routers/{router_id}/alerts/{alert_id}:
    delete:
      parameters:
      - description: id of the project the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router for the alerts
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the alert
        in: path
        name: alert_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: Alert deleted successfully
        "400":
          description: Invalid project_id, router_id or alert_id
        "404":
          description: Alert not found
        "500":
          description: Error deleting the alert
      summary: Delete the alert for a router by ID
      tags:
      - Alerts
    get:
      parameters:
      - description: id of the project the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router for the alerts
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the alert
        in: path
        name: alert_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          description: Invalid project_id, router_id or alert_id
        "404":
          description: Alert not found
        "500":
          description: Error retrieving the alert
      summary: Get the alert for a router by ID
      tags:
      - Alerts
    put:
      parameters:
      - description: id of the project the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router for the alerts
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the alert
        in: path
        name: alert_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
        description: alert specification
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: OK
        "400":
          description: Invalid project_id, router_id or alert_id
        "404":
          description: Alert not found
        "500":
          description: Error updating the alert
      summary: Update the alert for a router by ID
      tags:
      - Alerts
  /projects/{project_id}/routers:
    get:
      parameters:
      - description: project id of the project to retrieve routers from
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RouterDetails'
                type: array
          description: OK
        "400":
          description: Invalid project_id
        "500":
          description: Error retrieving routers
      summary: List routers belonging to project
      tags:
      - Router
    post:
      parameters:
      - description: project id of the project to save router
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouterConfig'
        description: router configuration to save
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouterDetails'
          description: OK
        "400":
          description: Invalid project_id or router configuration
        "500":
          description: Unable to save configuration
      summary: Create new router in project
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}:
    delete:
      parameters:
      - description: project id of the project of the router
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to delete
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: Router not found
        "500":
          description: Unable to delete router
      summary: Delete router
      tags:
      - Router
    get:
      parameters:
      - description: project id of the project to retrieve routers from
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be retrieved
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouterDetails'
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: No router found
      summary: Get router belonging to project by ID
      tags:
      - Router
    put:
      parameters:
      - description: project id of the project of the router
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to update
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouterConfig'
        description: router configuration to save
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouterDetails'
          description: OK
        "400":
          description: Invalid project_id, router_id or router configuration
        "500":
          description: Unable to save configuration
      summary: Update router
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/deploy:
    post:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be deployed
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: Accepted
        "400":
          description: Invalid project_id, router_id or deploy request
        "404":
          description: No router version found
      summary: Deploy the current router configuration
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/undeploy:
    post:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to undeploy
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: Router not found
        "500":
          description: Error undeploying router version
      summary: Undeploy router configuration
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/versions:
    get:
      parameters:
      - description: project id of the project to retrieve routers from
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be retrieved
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RouterVersion'
                type: array
          description: OK
        "400":
          description: Invalid project_id or router_id
        "404":
          description: No router versions found
      summary: List router config versions
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/versions/{version}:
    delete:
      parameters:
      - description: project id of the project of the router
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: version of router configuration to delete
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: OK
        "400":
          description: Invalid project_id, router_id or version
        "404":
          description: Router version not found
        "500":
          description: Unable to delete router version
      summary: Delete router version
      tags:
      - Router
    get:
      parameters:
      - description: project id of the project to retrieve routers from
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be retrieved
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: version of router configuration to be retrieved
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouterVersion'
          description: OK
        "400":
          description: Invalid project_id, router_id or version_id
        "404":
          description: No router version found
      summary: Get specific router config version
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/versions/{version}/deploy:
    post:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be deployed
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: version of router configuration to be deployed
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_202'
          description: Accepted
        "400":
          description: Invalid project_id, router_id, version_id or deploy request
        "404":
          description: No router version found
      summary: Deploy specified version of router configuration
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/events:
    get:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router to be deployed
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: Get events
        "400":
          description: Invalid project_id or router_id
        "404":
          description: No router version found
      summary: Get deployment events associated with this router
      tags:
      - Router
  /projects/{project_id}/routers/{router_id}/logs:
    get:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: component type of the router to get the logs from
        in: query
        name: component_type
        required: false
        schema:
          enum:
          - router
          - enricher
          - ensembler
          type: string
      - description: container to get the logs from, default to 'user-container',
          the default container name in Knative
        in: query
        name: container
        required: false
        schema:
          type: string
      - description: RFC 3399 timestamp from which to retrieve the logs e.g. 2002-10-02T15:00:00Z.
          The logs retrieved will have timestamp after (but not including) since_time
        in: query
        name: since_time
        required: false
        schema:
          type: string
      - description: number of lines from the end of the logs to retrieve. If both
          tail_lines and head_lines are set, tail_lines will be ignored
        in: query
        name: tail_lines
        required: false
        schema:
          type: string
      - description: number of lines from the start of the logs to retrieve. If both
          tail_lines and head_lines are set, tail_lines will be ignored
        in: query
        name: head_lines
        required: false
        schema:
          type: string
      - description: if true, return the logs from previous terminated container in
          all pods, default to false
        in: query
        name: previous
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PodLog'
                type: array
          description: OK
        "400":
          description: Invalid value for the router id or query strings
        "500":
          description: Failed to list pod logs due to internal error
      summary: List logs for a router, default to 'router' component type and the
        currently deployed version
      tags:
      - Logs
  /projects/{project_id}/routers/{router_id}/versions/{version}/logs:
    get:
      parameters:
      - description: id of the project that the router belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the router
        in: path
        name: router_id
        required: true
        schema:
          format: int32
          type: integer
      - description: router version value to get the logs from
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: component type of the router to get the logs from
        in: query
        name: component_type
        required: false
        schema:
          enum:
          - router
          - enricher
          - ensembler
          type: string
      - description: container to get the logs from, default to 'user-container',
          the default container name in Knative
        in: query
        name: container
        required: false
        schema:
          type: string
      - description: RFC 3399 timestamp from which to retrieve the logs e.g. 2002-10-02T15:00:00Z
        in: query
        name: since_time
        required: false
        schema:
          type: string
      - description: number of lines from the end of the logs to retrieve, this takes
          priority over 'since_time'
        in: query
        name: tail_lines
        required: false
        schema:
          type: string
      - description: if true, return the logs from previous terminated container in
          all pods, default to false
        in: query
        name: previous
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PodLog'
                type: array
          description: OK
        "400":
          description: Invalid value for the router, version id or query strings
        "500":
          description: Failed to list pod logs due to internal error
      summary: List logs for a router with a specific version, default to 'router'
        component type
      tags:
      - Logs
  /projects/{project_id}/jobs/{job_id}/logs:
    get:
      parameters:
      - description: id of the project that the ensembling job belongs to
        in: path
        name: project_id
        required: true
        schema:
          format: int32
          type: integer
      - description: id of the ensembling job
        in: path
        name: job_id
        required: true
        schema:
          format: int32
          type: integer
      - description: component type of the ensembling job to get the logs from
        in: query
        name: component_type
        required: false
        schema:
          enum:
          - image_builder
          - driver
          - executor
          type: string
      - description: RFC 3399 timestamp from which to retrieve the logs e.g. 2002-10-02T15:00:00Z.
          The logs retrieved will have timestamp after (but not including) since_time
        in: query
        name: since_time
        required: false
        schema:
          type: string
      - description: number of lines from the end of the logs to retrieve. If both
          tail_lines and head_lines are set, tail_lines will be ignored
        in: query
        name: tail_lines
        required: false
        schema:
          type: string
      - description: number of lines from the start of the logs to retrieve. If both
          tail_lines and head_lines are set, tail_lines will be ignored
        in: query
        name: head_lines
        required: false
        schema:
          type: string
      - description: if true, return the logs from previous terminated container in
          all pods, default to false
        in: query
        name: previous
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsemblingPodLogs'
          description: OK
        "400":
          description: Invalid value for the ensembling job id or query strings
        "404":
          description: Ensembling job not found
        "500":
          description: Failed to list pod logs due to internal error
      summary: List logs for an ensembling job, default to 'image_builder' component
        type
      tags:
      - Logs
  /experiment-engines:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExperimentEngine'
                type: array
          description: OK
        "500":
          description: Error querying experiment engines
      summary: List the available experiment engines
      tags:
      - Experiments
  /experiment-engines/{engine}/clients:
    get:
      parameters:
      - description: name of the experiment engine
        in: path
        name: engine
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExperimentClient'
                type: array
          description: OK
        "400":
          description: Invalid engine name
        "500":
          description: Error querying experiment engine clients
      summary: List the clients configured on the given experiment engine
      tags:
      - Experiments
  /experiment-engines/{engine}/experiments:
    get:
      parameters:
      - description: name of the experiment engine
        in: path
        name: engine
        required: true
        schema:
          type: string
      - description: internal (unique) id of the client to filter experiments by
        in: query
        name: client_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Experiment'
                type: array
          description: OK
        "400":
          description: Invalid engine name
        "500":
          description: Error querying experiments for the given experiment engine
      summary: List the experiments configured on the given experiment engine
      tags:
      - Experiments
  /experiment-engines/{engine}/variables:
    get:
      parameters:
      - description: name of the experiment engine
        in: path
        name: engine
        required: true
        schema:
          type: string
      - description: internal (unique) id of the client.
        in: query
        name: client_id
        schema:
          type: string
      - description: comma-separated internal (unique) ids of the experiments.
        in: query
        name: experiment_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentVariables'
          description: OK
        "400":
          description: Invalid engine name, client_id or experiment_id(s)
        "500":
          description: Error querying variables for the given client / experiment(s)
      summary: List the variables configured for the given client and/or experiment(s)
      tags:
      - Experiments
components:
  schemas:
    Project:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        readers:
        - readers
        - readers
        stream: stream
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        team: team
        mlflow_tracking_url: mlflow_tracking_url
        administrators:
        - administrators
        - administrators
        labels:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        mlflow_tracking_url:
          type: string
        administrators:
          items:
            type: string
          type: array
        readers:
          items:
            type: string
          type: array
        team:
          type: string
        stream:
          type: string
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
    Label:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    EnsemblersPaginatedResults:
      allOf:
      - $ref: '#/components/schemas/EnsemblersPaginatedResults_allOf'
      - $ref: '#/components/schemas/EnsemblersPaginatedResults_allOf_1'
    GenericEnsembler:
      properties:
        id:
          format: int32
          type: integer
        project_id:
          format: int32
          type: integer
        type:
          $ref: '#/components/schemas/EnsemblerType'
        name:
          maxLength: 20
          minLength: 3
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - type
    EnsemblerType:
      enum:
      - pyfunc
      type: string
    Ensembler:
      discriminator:
        mapping:
          pyfunc: '#/components/schemas/PyFuncEnsembler'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/PyFuncEnsembler'
      type: object
    PyFuncEnsembler:
      allOf:
      - $ref: '#/components/schemas/GenericEnsembler'
      - $ref: '#/components/schemas/PyFuncEnsembler_allOf'
    EnsemblingJobPaginatedResults:
      allOf:
      - $ref: '#/components/schemas/EnsemblersPaginatedResults_allOf'
      - $ref: '#/components/schemas/EnsemblingJobPaginatedResults_allOf'
    EnsemblingJob:
      description: A JSON object that represents an ensembling job for batch experiment
        use cases
      example:
        job_config:
          metadata:
            name: name
            annotations:
              key: annotations
          version: version
          spec:
            source:
              join_on:
              - join_on
              - join_on
            ensembler:
              result:
                column_name: column_name
              uri: https://openapi-generator.tech
            predictions: {}
        updated_at: 2000-01-23T04:56:07.000+00:00
        project_id: 6
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        ensembler_id: 1
        id: 0
        error: error
        infra_config:
          service_account_name: service_account_name
          ensembler_name: ensembler_name
          resources:
            driver_cpu_request: driver_cpu_request
            executor_memory_request: executor_memory_request
            driver_memory_request: driver_memory_request
            executor_cpu_request: executor_cpu_request
            executor_replica: 5
          artifact_uri: artifact_uri
          env:
          - name: name
            value: value
          - name: name
            value: value
        monitoring_url: monitoring_url
        environment_name: environment_name
      properties:
        id:
          format: int32
          type: integer
        name:
          maxLength: 50
          minLength: 3
          readOnly: true
          type: string
        project_id:
          format: int32
          type: integer
        ensembler_id:
          format: int32
          type: integer
        environment_name:
          type: string
        infra_config:
          $ref: '#/components/schemas/EnsemblerInfraConfig'
        job_config:
          $ref: '#/components/schemas/EnsemblerConfig'
        status:
          $ref: '#/components/schemas/EnsemblerJobStatus'
        error:
          type: string
        monitoring_url:
          readOnly: true
          type: string
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
    EnsemblerInfraConfig:
      example:
        service_account_name: service_account_name
        ensembler_name: ensembler_name
        resources:
          driver_cpu_request: driver_cpu_request
          executor_memory_request: executor_memory_request
          driver_memory_request: driver_memory_request
          executor_cpu_request: executor_cpu_request
          executor_replica: 5
        artifact_uri: artifact_uri
        env:
        - name: name
          value: value
        - name: name
          value: value
      properties:
        artifact_uri:
          type: string
        ensembler_name:
          type: string
        service_account_name:
          type: string
          x-go-custom-tag: validate:"required"
        resources:
          $ref: '#/components/schemas/EnsemblingResources'
        env:
          items:
            $ref: '#/components/schemas/EnvVar'
          type: array
      type: object
    EnsemblingResources:
      example:
        driver_cpu_request: driver_cpu_request
        executor_memory_request: executor_memory_request
        driver_memory_request: driver_memory_request
        executor_cpu_request: executor_cpu_request
        executor_replica: 5
      nullable: true
      properties:
        driver_cpu_request:
          type: string
        driver_memory_request:
          type: string
        executor_replica:
          type: integer
        executor_cpu_request:
          type: string
        executor_memory_request:
          type: string
      type: object
    EnsemblerConfig:
      example:
        metadata:
          name: name
          annotations:
            key: annotations
        version: version
        spec:
          source:
            join_on:
            - join_on
            - join_on
          ensembler:
            result:
              column_name: column_name
            uri: https://openapi-generator.tech
          predictions: {}
      properties:
        version:
          type: string
        kind:
          $ref: '#/components/schemas/EnsemblerConfigKind'
        metadata:
          $ref: '#/components/schemas/EnsemblingJobMeta'
        spec:
          $ref: '#/components/schemas/EnsemblingJobSpec'
      required:
      - kind
      - spec
      - version
      type: object
    EnsemblerConfigKind:
      enum:
      - BatchEnsemblingJob
      type: string
    EnsemblingJobMeta:
      description: Ensembling job Metadata
      example:
        name: name
        annotations:
          key: annotations
      properties:
        name:
          type: string
        annotations:
          additionalProperties:
            type: string
          nullable: true
          type: object
      required:
      - name
    EnsemblingJobSpec:
      description: Ensembling job Specification
      example:
        source:
          join_on:
          - join_on
          - join_on
        ensembler:
          result:
            column_name: column_name
          uri: https://openapi-generator.tech
        predictions: {}
      properties:
        source:
          $ref: '#/components/schemas/EnsemblingJobSource'
        predictions:
          additionalProperties:
            $ref: '#/components/schemas/EnsemblingJobPredictionSource'
          type: object
        ensembler:
          $ref: '#/components/schemas/EnsemblingJobEnsemblerSpec'
        sink:
          $ref: '#/components/schemas/EnsemblingJobSink'
      required:
      - ensembler
      - predictions
      - sink
      - source
    EnsemblingJobSource:
      example:
        join_on:
        - join_on
        - join_on
      properties:
        dataset:
          $ref: '#/components/schemas/Dataset'
        join_on:
          items:
            type: string
          type: array
      required:
      - dataset
      - join_on
      type: object
    Dataset:
      discriminator:
        mapping:
          BQ: '#/components/schemas/BigQueryDataset'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BigQueryDataset'
      type: object
    BigQueryDataset:
      allOf:
      - $ref: '#/components/schemas/GenericDataset'
      - $ref: '#/components/schemas/BigQueryDataset_allOf'
    GenericDataset:
      properties:
        type:
          enum:
          - BQ
          type: string
      required:
      - type
      type: object
    BigQueryDatasetConfig:
      properties:
        table:
          pattern: ^([a-z][a-z0-9-]+\.\w+([_]?\w)+\.\w+([_]?\w)+)?$
          type: string
        features:
          items:
            type: string
          nullable: true
          type: array
        query:
          type: string
        options:
          additionalProperties:
            type: string
          nullable: true
          type: object
    EnsemblingJobPredictionSource:
      allOf:
      - $ref: '#/components/schemas/EnsemblingJobSource'
      - $ref: '#/components/schemas/EnsemblingJobPredictionSource_allOf'
      type: object
    EnsemblingJobEnsemblerSpec:
      example:
        result:
          column_name: column_name
        uri: https://openapi-generator.tech
      properties:
        uri:
          default: ""
          format: uri
          type: string
        result:
          $ref: '#/components/schemas/EnsemblingJobEnsemblerSpecResult'
      required:
      - result
      - uri
      type: object
    EnsemblingJobEnsemblerSpecResult:
      example:
        column_name: column_name
      properties:
        type:
          $ref: '#/components/schemas/EnsemblingJobResultType'
        item_type:
          $ref: '#/components/schemas/EnsemblingJobResultType'
        column_name:
          type: string
      required:
      - column_name
      - type
      type: object
    EnsemblingJobResultType:
      enum:
      - DOUBLE
      - FLOAT
      - INTEGER
      - LONG
      - STRING
      - ARRAY
      type: string
    EnsemblingJobSink:
      discriminator:
        mapping:
          BQ: '#/components/schemas/BigQuerySink'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/BigQuerySink'
      type: object
    BigQuerySink:
      allOf:
      - $ref: '#/components/schemas/GenericSink'
      - $ref: '#/components/schemas/BigQuerySink_allOf'
    GenericSink:
      properties:
        type:
          enum:
          - CONSOLE
          - BQ
          type: string
        columns:
          items:
            type: string
          nullable: true
          type: array
        save_mode:
          $ref: '#/components/schemas/SaveMode'
      required:
      - save_mode
      - type
      type: object
    SaveMode:
      enum:
      - ERRORIFEXISTS
      - OVERWRITE
      - APPEND
      - IGNORE
      type: string
    BigQuerySinkConfig:
      properties:
        table:
          type: string
        staging_bucket:
          type: string
        options:
          additionalProperties:
            type: string
          nullable: true
          type: object
      required:
      - staging_bucket
      - table
      type: object
    EnsemblerJobStatus:
      enum:
      - pending
      - building
      - running
      - terminating
      - terminated
      - completed
      - failed
      - failed_submission
      - failed_building
      type: string
    IdObject:
      example:
        id: 0
      properties:
        id:
          format: int32
          type: integer
    Id:
      format: int32
      type: integer
    Alert:
      example:
        duration: duration
        environment: environment
        updated_at: 2000-01-23T04:56:07.000+00:00
        service: service
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        team: team
        critical_threshold: 1.4658129805029452
        warning_threshold: 6.027456183070403
      properties:
        id:
          readOnly: true
          type: integer
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
        environment:
          type: string
        team:
          type: string
        service:
          type: string
        metric:
          $ref: '#/components/schemas/AlertMetric'
        warning_threshold:
          type: number
        critical_threshold:
          type: number
        duration:
          type: string
      required:
      - environment
      - metric
      - team
      type: object
    AlertMetric:
      enum:
      - throughput
      - latency95p
      - error_rate
      - cpu_util
      - memory_util
      type: string
    RouterDetails:
      allOf:
      - $ref: '#/components/schemas/Router'
      - $ref: '#/components/schemas/RouterDetails_allOf'
    Router:
      example:
        endpoint: endpoint
        updated_at: 2000-01-23T04:56:07.000+00:00
        project_id: 1
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 6
        monitoring_url: monitoring_url
        environment_name: environment_name
      nullable: true
      properties:
        id:
          format: int32
          type: integer
        name:
          type: string
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
        project_id:
          type: integer
        environment_name:
          type: string
        endpoint:
          readOnly: true
          type: string
        monitoring_url:
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/RouterStatus'
      type: object
    RouterStatus:
      default: pending
      enum:
      - deployed
      - undeployed
      - failed
      - pending
      type: string
    RouterVersion:
      example:
        image: image
        created_at: 2000-01-23T04:56:07.000+00:00
        rules:
        - routes:
          - routes
          - routes
          conditions:
          - field: field
            values:
            - values
            - values
            operator: in
          - field: field
            values:
            - values
            - values
            operator: in
        - routes:
          - routes
          - routes
          conditions:
          - field: field
            values:
            - values
            - values
            operator: in
          - field: field
            values:
            - values
            - values
            operator: in
        error: error
        default_route: default_route
        version: 5
        log_config:
          custom_metrics_enabled: true
          bigquery_config:
            batch_load: true
            table: table
            service_account_secret: service_account_secret
          kafka_config:
            brokers: brokers
            topic: topic
            serialization_format: json
          fiber_debug_log_enabled: true
          jaeger_enabled: true
        timeout: timeout
        monitoring_url: monitoring_url
        experiment_engine:
          type: nop
          config: '{}'
        enricher:
          service_account: secret-name-for-google-service-account
          image: image
          endpoint: endpoint
          updated_at: 2000-01-23T04:56:07.000+00:00
          port: 5
          created_at: 2000-01-23T04:56:07.000+00:00
          resource_request:
            min_replica: 0
            max_replica: 6
            memory_request: memory_request
            cpu_request: cpu_request
          id: 1
          env:
          - name: name
            value: value
          - name: name
            value: value
          timeout: timeout
        routes:
        - endpoint: endpoint
          annotations: '{}'
          id: id
          type: type
          timeout: timeout
        - endpoint: endpoint
          annotations: '{}'
          id: id
          type: type
          timeout: timeout
        router:
          endpoint: endpoint
          updated_at: 2000-01-23T04:56:07.000+00:00
          project_id: 1
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 6
          monitoring_url: monitoring_url
          environment_name: environment_name
        updated_at: 2000-01-23T04:56:07.000+00:00
        default_route_id: default_route_id
        resource_request:
          min_replica: 0
          max_replica: 6
          memory_request: memory_request
          cpu_request: cpu_request
        id: 0
        ensembler:
          updated_at: 2000-01-23T04:56:07.000+00:00
          standard_config:
            experiment_mappings:
            - treatment: treatment-1
              route: route-1
              experiment: experiment-1
            - treatment: treatment-1
              route: route-1
              experiment: experiment-1
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5
          type: standard
          docker_config:
            service_account: secret-name-for-google-service-account
            image: image
            endpoint: endpoint
            port: 2
            resource_request:
              min_replica: 0
              max_replica: 6
              memory_request: memory_request
              cpu_request: cpu_request
            env:
            - name: name
              value: value
            - name: name
              value: value
            timeout: timeout
      properties:
        id:
          format: int32
          type: integer
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
        router:
          $ref: '#/components/schemas/Router'
        version:
          type: integer
        status:
          $ref: '#/components/schemas/RouterVersionStatus'
        error:
          type: string
        image:
          type: string
        routes:
          items:
            $ref: '#/components/schemas/Route'
          type: array
        default_route:
          type: string
        experiment_engine:
          $ref: '#/components/schemas/ExperimentConfig'
        resource_request:
          $ref: '#/components/schemas/ResourceRequest'
        timeout:
          type: string
        log_config:
          $ref: '#/components/schemas/RouterVersion_log_config'
        enricher:
          $ref: '#/components/schemas/Enricher'
        ensembler:
          $ref: '#/components/schemas/RouterEnsemblerConfig'
        monitoring_url:
          readOnly: true
          type: string
        default_route_id:
          type: string
        rules:
          items:
            $ref: '#/components/schemas/TrafficRule'
          type: array
      type: object
    RouterVersionStatus:
      default: pending
      enum:
      - deployed
      - undeployed
      - failed
      - pending
      type: string
    Route:
      example:
        endpoint: endpoint
        annotations: '{}'
        id: id
        type: type
        timeout: timeout
      properties:
        id:
          type: string
        type:
          type: string
        endpoint:
          type: string
        timeout:
          type: string
        annotations:
          nullable: true
          type: object
      required:
      - endpoint
      - id
      - timeout
      - type
      type: object
    ResourceRequest:
      example:
        min_replica: 0
        max_replica: 6
        memory_request: memory_request
        cpu_request: cpu_request
      properties:
        min_replica:
          type: integer
        max_replica:
          type: integer
        cpu_request:
          type: string
        memory_request:
          type: string
      type: object
    LogLevel:
      enum:
      - DEBUG
      - INFO
      - WARN
      - ERROR
      type: string
    ResultLoggerType:
      default: nop
      enum:
      - nop
      - console
      - bigquery
      - kafka
      type: string
    BigQueryConfig:
      example:
        batch_load: true
        table: table
        service_account_secret: service_account_secret
      properties:
        table:
          type: string
        service_account_secret:
          type: string
        batch_load:
          nullable: true
          type: boolean
      required:
      - service_account_secret
      - table
      type: object
    KafkaConfig:
      example:
        brokers: brokers
        topic: topic
        serialization_format: json
      properties:
        brokers:
          description: Comma-separated list of host and port pairs that are the addresses
            of the Kafka brokers.
          type: string
        topic:
          type: string
        serialization_format:
          enum:
          - json
          - protobuf
          type: string
      required:
      - brokers
      - serialization_format
      - topic
      type: object
    Enricher:
      example:
        service_account: secret-name-for-google-service-account
        image: image
        endpoint: endpoint
        updated_at: 2000-01-23T04:56:07.000+00:00
        port: 5
        created_at: 2000-01-23T04:56:07.000+00:00
        resource_request:
          min_replica: 0
          max_replica: 6
          memory_request: memory_request
          cpu_request: cpu_request
        id: 1
        env:
        - name: name
          value: value
        - name: name
          value: value
        timeout: timeout
      properties:
        id:
          format: int32
          type: integer
        image:
          type: string
        resource_request:
          $ref: '#/components/schemas/ResourceRequest'
        endpoint:
          type: string
        timeout:
          type: string
        port:
          type: integer
        env:
          items:
            $ref: '#/components/schemas/EnvVar'
          type: array
        service_account:
          description: |
            (Optional) Name of the secret registered in the current MLP project that contains the Google service account JSON key. This secret will be mounted as a file inside the container and the environment variable GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
          example: secret-name-for-google-service-account
          type: string
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
      - endpoint
      - env
      - image
      - port
      - resource_request
      - timeout
      type: object
    RouterEnsemblerConfig:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        standard_config:
          experiment_mappings:
          - treatment: treatment-1
            route: route-1
            experiment: experiment-1
          - treatment: treatment-1
            route: route-1
            experiment: experiment-1
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5
        type: standard
        docker_config:
          service_account: secret-name-for-google-service-account
          image: image
          endpoint: endpoint
          port: 2
          resource_request:
            min_replica: 0
            max_replica: 6
            memory_request: memory_request
            cpu_request: cpu_request
          env:
          - name: name
            value: value
          - name: name
            value: value
          timeout: timeout
      properties:
        id:
          format: int32
          type: integer
        type:
          description: type of ensembler
          enum:
          - standard
          - docker
          type: string
        standard_config:
          $ref: '#/components/schemas/EnsemblerStandardConfig'
        docker_config:
          $ref: '#/components/schemas/EnsemblerDockerConfig'
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
      required:
      - type
      type: object
    EnsemblerStandardConfig:
      description: ensembler config when ensembler type is standard
      example:
        experiment_mappings:
        - treatment: treatment-1
          route: route-1
          experiment: experiment-1
        - treatment: treatment-1
          route: route-1
          experiment: experiment-1
      nullable: true
      properties:
        experiment_mappings:
          items:
            $ref: '#/components/schemas/EnsemblerStandardConfig_experiment_mappings'
          type: array
      required:
      - experiment_mappings
      type: object
    EnsemblerDockerConfig:
      description: ensembler config when ensembler type is docker
      example:
        service_account: secret-name-for-google-service-account
        image: image
        endpoint: endpoint
        port: 2
        resource_request:
          min_replica: 0
          max_replica: 6
          memory_request: memory_request
          cpu_request: cpu_request
        env:
        - name: name
          value: value
        - name: name
          value: value
        timeout: timeout
      nullable: true
      properties:
        image:
          type: string
        resource_request:
          $ref: '#/components/schemas/ResourceRequest'
        endpoint:
          type: string
        timeout:
          type: string
        port:
          type: integer
        env:
          items:
            $ref: '#/components/schemas/EnvVar'
          type: array
        service_account:
          description: |
            (Optional) Name of the secret registered in the current MLP project that contains the Google service account JSON key. This secret will be mounted as a file inside the container and the environment variable GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
          example: secret-name-for-google-service-account
          type: string
      required:
      - endpoint
      - env
      - image
      - port
      - resource_request
      - timeout
      type: object
    TrafficRule:
      example:
        routes:
        - routes
        - routes
        conditions:
        - field: field
          values:
          - values
          - values
          operator: in
        - field: field
          values:
          - values
          - values
          operator: in
      properties:
        conditions:
          items:
            $ref: '#/components/schemas/TrafficRuleCondition'
          type: array
        routes:
          description: List of IDs of the routes, that should be activated by this
            rule
          items:
            type: string
          type: array
      required:
      - conditions
      - routes
      type: object
    TrafficRuleCondition:
      example:
        field: field
        values:
        - values
        - values
        operator: in
      properties:
        field_source:
          $ref: '#/components/schemas/FieldSource'
        field:
          description: |
            If `field_source` is `header`, then `field` should contain the name of the request header, otherwise, if `field_source` is `payload`, then `field` should be a valid json path
          type: string
        operator:
          enum:
          - in
          type: string
        values:
          items:
            type: string
          type: array
      required:
      - field
      - field_source
      - operator
      - values
      type: object
    RouterConfig:
      example:
        name: name
        config:
          enricher:
            service_account: secret-name-for-google-service-account
            image: image
            endpoint: endpoint
            updated_at: 2000-01-23T04:56:07.000+00:00
            port: 5
            created_at: 2000-01-23T04:56:07.000+00:00
            resource_request:
              min_replica: 0
              max_replica: 6
              memory_request: memory_request
              cpu_request: cpu_request
            id: 1
            env:
            - name: name
              value: value
            - name: name
              value: value
            timeout: timeout
          routes:
          - endpoint: endpoint
            annotations: '{}'
            id: id
            type: type
            timeout: timeout
          - endpoint: endpoint
            annotations: '{}'
            id: id
            type: type
            timeout: timeout
          default_route_id: default_route_id
          rules:
          - routes:
            - routes
            - routes
            conditions:
            - field: field
              values:
              - values
              - values
              operator: in
            - field: field
              values:
              - values
              - values
              operator: in
          - routes:
            - routes
            - routes
            conditions:
            - field: field
              values:
              - values
              - values
              operator: in
            - field: field
              values:
              - values
              - values
              operator: in
          resource_request:
            min_replica: 0
            max_replica: 6
            memory_request: memory_request
            cpu_request: cpu_request
          ensembler:
            updated_at: 2000-01-23T04:56:07.000+00:00
            standard_config:
              experiment_mappings:
              - treatment: treatment-1
                route: route-1
                experiment: experiment-1
              - treatment: treatment-1
                route: route-1
                experiment: experiment-1
            created_at: 2000-01-23T04:56:07.000+00:00
            id: 5
            type: standard
            docker_config:
              service_account: secret-name-for-google-service-account
              image: image
              endpoint: endpoint
              port: 2
              resource_request:
                min_replica: 0
                max_replica: 6
                memory_request: memory_request
                cpu_request: cpu_request
              env:
              - name: name
                value: value
              - name: name
                value: value
              timeout: timeout
          log_config:
            bigquery_config:
              batch_load: true
              table: table
              service_account_secret: service_account_secret
            kafka_config:
              brokers: brokers
              topic: topic
              serialization_format: json
          timeout: timeout
          experiment_engine:
            type: nop
            config: '{}'
        environment_name: environment_name
      properties:
        environment_name:
          type: string
        name:
          type: string
        config:
          $ref: '#/components/schemas/RouterConfig_config'
      required:
      - config
      - environment_name
      - name
      type: object
    Event:
      example:
        event_type: info
        updated_at: 2000-01-23T04:56:07.000+00:00
        stage: stage
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        message: message
        version: 6
      properties:
        id:
          format: int32
          type: integer
        created_at:
          format: date-time
          readOnly: true
          type: string
        updated_at:
          format: date-time
          readOnly: true
          type: string
        version:
          type: integer
        event_type:
          enum:
          - info
          - error
          type: string
        stage:
          type: string
        message:
          type: string
      type: object
    PodLog:
      description: PodLog object contains a log item from a container in a pod
      example:
        json_payload:
          level: info
          msg: Initializing Nop Result Logger
          router_version: test-1-1.integration-test
          ts: 1.5943868326632557E9
        environment: staging
        container_name: user-container
        namespace: cartography
        text_payload: Example log from a container
        timestamp: 2020-07-10T21:13:51Z
        pod_name: nearby-turing-router-90-deployment-7b49b4bcb5-jlr7n
      properties:
        timestamp:
          description: Log timestamp in RFC3339 format
          example: 2020-07-10T21:13:51Z
          format: date-time
          type: string
        environment:
          description: Environment name of the pod running the container that produces
            this log
          example: staging
          type: string
        namespace:
          description: Kubernetes namespace where the pod running the container is
            created
          example: cartography
          type: string
        pod_name:
          description: Pod name running the container that produces this log
          example: nearby-turing-router-90-deployment-7b49b4bcb5-jlr7n
          type: string
        container_name:
          description: Container name that produces this log
          example: user-container
          type: string
        text_payload:
          description: Log in text format, either text_payload or json_payload will
            be set but not both
          example: Example log from a container
          type: string
        json_payload:
          description: Log in JSON format, either text_payload or json_payload will
            be set but not both
          example:
            level: info
            msg: Initializing Nop Result Logger
            router_version: test-1-1.integration-test
            ts: 1.5943868326632557E9
          type: object
      type: object
    EnsemblingPodLogs:
      description: EnsemblingPodLog object contains a log item from a container in
        an ensembling pod
      example:
        environment: staging
        namespace: cartography
        logs:
        - text_payload: Example log from a container
          timestamp: 2020-07-10T21:13:51Z
          pod_name: batch-7b49b4bcb5-jlr7n
        - text_payload: Example log from a container
          timestamp: 2020-07-10T21:13:51Z
          pod_name: batch-7b49b4bcb5-jlr7n
        logging_url: http://www.example.com/logging?pod_name=hello&namespace=world
      properties:
        environment:
          description: Environment name of the pod running the container that produces
            this log
          example: staging
          type: string
        namespace:
          description: Kubernetes namespace where the pod running the container is
            created
          example: cartography
          type: string
        logging_url:
          description: A URL link to the dashboard but might not be present if a logging
            storage is not configured in your infrastructure.
          example: http://www.example.com/logging?pod_name=hello&namespace=world
          type: string
        logs:
          description: Logs from the ensembling job pod. Each element represents a
            line.
          items:
            $ref: '#/components/schemas/EnsemblingPodLog'
          type: array
      type: object
    EnsemblingPodLog:
      description: EnsemblingPodLog object contains a log item from a container in
        an ensembling pod
      example:
        text_payload: Example log from a container
        timestamp: 2020-07-10T21:13:51Z
        pod_name: batch-7b49b4bcb5-jlr7n
      properties:
        timestamp:
          description: Log timestamp in RFC3339 format
          example: 2020-07-10T21:13:51Z
          format: date-time
          type: string
        pod_name:
          description: Pod name running the container that produces this log
          example: batch-7b49b4bcb5-jlr7n
          type: string
        text_payload:
          description: Log in text format, either text_payload or json_payload will
            be set but not both
          example: Example log from a container
          type: string
      type: object
    ExperimentEngine:
      discriminator:
        mapping:
          standard: '#/components/schemas/StandardExperimentEngine'
          custom: '#/components/schemas/CustomExperimentEngine'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/StandardExperimentEngine'
      - $ref: '#/components/schemas/CustomExperimentEngine'
      type: object
    StandardExperimentEngine:
      allOf:
      - $ref: '#/components/schemas/GenericExperimentEngine'
      - $ref: '#/components/schemas/StandardExperimentEngine_allOf'
    GenericExperimentEngine:
      properties:
        name:
          type: string
        display_name:
          description: Optional display name to be used in the UI
          type: string
        type:
          $ref: '#/components/schemas/ExperimentManagerType'
      required:
      - name
      - type
      type: object
    ExperimentManagerType:
      enum:
      - standard
      - custom
      type: string
    CustomExperimentEngine:
      allOf:
      - $ref: '#/components/schemas/GenericExperimentEngine'
      - $ref: '#/components/schemas/CustomExperimentEngine_allOf'
    ExperimentClient:
      example:
        passkey: passkey
        id: id
        username: username
      properties:
        id:
          type: string
        username:
          type: string
        passkey:
          type: string
      required:
      - id
      - username
      type: object
    Experiment:
      example:
        name: name
        id: id
        variants:
        - name: control
        - name: control
        client_id: client_id
      properties:
        id:
          type: string
        name:
          type: string
        client_id:
          type: string
        variants:
          description: List of variants in the experiment
          items:
            $ref: '#/components/schemas/Experiment_variants'
          type: array
      required:
      - client_id
      - id
      - name
      type: object
    ExperimentVariables:
      example:
        experiment_variables:
          key:
          - name: name
            type: unsupported
            required: true
          - name: name
            type: unsupported
            required: true
        client_variables:
        - name: name
          type: unsupported
          required: true
        - name: name
          type: unsupported
          required: true
        config:
        - field: field
          name: name
          required: true
        - field: field
          name: name
          required: true
      properties:
        client_variables:
          description: list of variables defined for the client
          items:
            $ref: '#/components/schemas/ExperimentVariable'
          type: array
        experiment_variables:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ExperimentVariable'
            type: array
          description: map of experiment id to its variables
          properties:
            default:
              items:
                $ref: '#/components/schemas/ExperimentVariable'
              type: array
          type: object
        config:
          items:
            $ref: '#/components/schemas/ExperimentVariableConfig'
          type: array
      type: object
    ExperimentVariable:
      example:
        name: name
        type: unsupported
        required: true
      properties:
        name:
          type: string
        required:
          type: boolean
        type:
          enum:
          - unsupported
          - unit
          - filter
          type: string
      type: object
    ExperimentVariableConfig:
      example:
        field: field
        name: name
        required: true
      properties:
        name:
          type: string
        required:
          type: boolean
        field:
          type: string
        field_source:
          $ref: '#/components/schemas/FieldSource'
      type: object
    pagination.Paging:
      properties:
        total:
          description: Total number of results matching the query criteria
          format: int32
          type: integer
        page:
          description: Number of the current page
          format: int32
          type: integer
        pages:
          description: Total number of pages
          format: int32
          type: integer
      type: object
    EnvVar:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      required:
      - name
      type: object
    ExperimentConfig:
      example:
        type: nop
        config: '{}'
      properties:
        type:
          default: nop
          type: string
        config:
          type: object
      required:
      - type
      type: object
    ExperimentEngineType:
      default: nop
      type: string
    FieldSource:
      enum:
      - header
      - payload
      type: string
    inline_response_200:
      example:
        router_id: 0
      properties:
        router_id:
          format: int32
          type: integer
      type: object
    inline_response_202:
      example:
        router_id: 0
        version: 6
      properties:
        router_id:
          format: int32
          type: integer
        version:
          format: int32
          type: integer
      type: object
    EnsemblersPaginatedResults_allOf:
      properties:
        paging:
          $ref: '#/components/schemas/pagination.Paging'
      type: object
    EnsemblersPaginatedResults_allOf_1:
      properties:
        results:
          items:
            $ref: '#/components/schemas/GenericEnsembler'
          type: array
      type: object
    PyFuncEnsembler_allOf:
      properties:
        mlflow_url:
          format: uri
          type: string
        mlflow_experiment_id:
          format: int32
          type: integer
        mlflow_run_id:
          type: string
        artifact_uri:
          format: uri
          type: string
      type: object
    EnsemblingJobPaginatedResults_allOf:
      properties:
        results:
          items:
            $ref: '#/components/schemas/EnsemblingJob'
          type: array
      type: object
    BigQueryDataset_allOf:
      properties:
        type:
          default: BQ
          enum:
          - BQ
          type: string
        bq_config:
          $ref: '#/components/schemas/BigQueryDatasetConfig'
      required:
      - bq_config
      type: object
    EnsemblingJobPredictionSource_allOf:
      properties:
        columns:
          items:
            type: string
          nullable: true
          type: array
      type: object
    BigQuerySink_allOf:
      properties:
        type:
          default: BQ
          enum:
          - CONSOLE
          - BQ
          type: string
        bq_config:
          $ref: '#/components/schemas/BigQuerySinkConfig'
      required:
      - bq_config
      type: object
    RouterDetails_allOf:
      properties:
        config:
          $ref: '#/components/schemas/RouterVersion'
      type: object
    RouterVersion_log_config:
      example:
        custom_metrics_enabled: true
        bigquery_config:
          batch_load: true
          table: table
          service_account_secret: service_account_secret
        kafka_config:
          brokers: brokers
          topic: topic
          serialization_format: json
        fiber_debug_log_enabled: true
        jaeger_enabled: true
      properties:
        log_level:
          $ref: '#/components/schemas/LogLevel'
        custom_metrics_enabled:
          type: boolean
        fiber_debug_log_enabled:
          type: boolean
        jaeger_enabled:
          type: boolean
        result_logger_type:
          $ref: '#/components/schemas/ResultLoggerType'
        bigquery_config:
          $ref: '#/components/schemas/BigQueryConfig'
        kafka_config:
          $ref: '#/components/schemas/KafkaConfig'
      type: object
    EnsemblerStandardConfig_experiment_mappings:
      example:
        treatment: treatment-1
        route: route-1
        experiment: experiment-1
      properties:
        experiment:
          description: experiment name from the configured experiment engine
          example: experiment-1
          type: string
        treatment:
          description: treatment name of the experiment
          example: treatment-1
          type: string
        route:
          description: route id of the routes configured in the router
          example: route-1
          type: string
      required:
      - experiment
      - route
      - treatment
      type: object
    RouterConfig_config_log_config:
      example:
        bigquery_config:
          batch_load: true
          table: table
          service_account_secret: service_account_secret
        kafka_config:
          brokers: brokers
          topic: topic
          serialization_format: json
      properties:
        result_logger_type:
          $ref: '#/components/schemas/ResultLoggerType'
        bigquery_config:
          $ref: '#/components/schemas/BigQueryConfig'
        kafka_config:
          $ref: '#/components/schemas/KafkaConfig'
      type: object
    RouterConfig_config:
      example:
        enricher:
          service_account: secret-name-for-google-service-account
          image: image
          endpoint: endpoint
          updated_at: 2000-01-23T04:56:07.000+00:00
          port: 5
          created_at: 2000-01-23T04:56:07.000+00:00
          resource_request:
            min_replica: 0
            max_replica: 6
            memory_request: memory_request
            cpu_request: cpu_request
          id: 1
          env:
          - name: name
            value: value
          - name: name
            value: value
          timeout: timeout
        routes:
        - endpoint: endpoint
          annotations: '{}'
          id: id
          type: type
          timeout: timeout
        - endpoint: endpoint
          annotations: '{}'
          id: id
          type: type
          timeout: timeout
        default_route_id: default_route_id
        rules:
        - routes:
          - routes
          - routes
          conditions:
          - field: field
            values:
            - values
            - values
            operator: in
          - field: field
            values:
            - values
            - values
            operator: in
        - routes:
          - routes
          - routes
          conditions:
          - field: field
            values:
            - values
            - values
            operator: in
          - field: field
            values:
            - values
            - values
            operator: in
        resource_request:
          min_replica: 0
          max_replica: 6
          memory_request: memory_request
          cpu_request: cpu_request
        ensembler:
          updated_at: 2000-01-23T04:56:07.000+00:00
          standard_config:
            experiment_mappings:
            - treatment: treatment-1
              route: route-1
              experiment: experiment-1
            - treatment: treatment-1
              route: route-1
              experiment: experiment-1
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5
          type: standard
          docker_config:
            service_account: secret-name-for-google-service-account
            image: image
            endpoint: endpoint
            port: 2
            resource_request:
              min_replica: 0
              max_replica: 6
              memory_request: memory_request
              cpu_request: cpu_request
            env:
            - name: name
              value: value
            - name: name
              value: value
            timeout: timeout
        log_config:
          bigquery_config:
            batch_load: true
            table: table
            service_account_secret: service_account_secret
          kafka_config:
            brokers: brokers
            topic: topic
            serialization_format: json
        timeout: timeout
        experiment_engine:
          type: nop
          config: '{}'
      properties:
        routes:
          items:
            $ref: '#/components/schemas/Route'
          type: array
        rules:
          items:
            $ref: '#/components/schemas/TrafficRule'
          type: array
        default_route_id:
          type: string
        experiment_engine:
          $ref: '#/components/schemas/ExperimentConfig'
        resource_request:
          $ref: '#/components/schemas/ResourceRequest'
        timeout:
          type: string
        log_config:
          $ref: '#/components/schemas/RouterConfig_config_log_config'
        enricher:
          $ref: '#/components/schemas/Enricher'
        ensembler:
          $ref: '#/components/schemas/RouterEnsemblerConfig'
      required:
      - default_route_id
      - experiment_engine
      - log_config
      - routes
      - timeout
      type: object
    StandardExperimentEngine_allOf_standard_experiment_manager_config:
      nullable: true
      properties:
        client_selection_enabled:
          type: boolean
        experiment_selection_enabled:
          type: boolean
      type: object
    StandardExperimentEngine_allOf:
      properties:
        standard_experiment_manager_config:
          $ref: '#/components/schemas/StandardExperimentEngine_allOf_standard_experiment_manager_config'
      type: object
    CustomExperimentEngine_allOf_custom_experiment_manager_config_remote_ui:
      properties:
        name:
          type: string
        url:
          type: string
      type: object
    CustomExperimentEngine_allOf_custom_experiment_manager_config:
      nullable: true
      properties:
        remote_ui:
          $ref: '#/components/schemas/CustomExperimentEngine_allOf_custom_experiment_manager_config_remote_ui'
        experiment_config_schema:
          type: string
      type: object
    CustomExperimentEngine_allOf:
      properties:
        custom_experiment_manager_config:
          $ref: '#/components/schemas/CustomExperimentEngine_allOf_custom_experiment_manager_config'
      type: object
    Experiment_variants:
      example:
        name: control
      properties:
        name:
          example: control
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
