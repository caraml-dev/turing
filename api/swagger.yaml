swagger: "2.0"
info:
  description: ""
  version: "0.0.1"
  title: "TURING API"
host: "localhost:8080"
basePath: "/v1"
schemes:
  - "http"
paths:
  "/projects/{project_id}/routers":
    get:
      tags: ["router"]
      summary: "List routers belonging to project"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project to retrieve routers from"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Router"
        400:
          description: "Invalid project_id"
        500:
          description: "Error retrieving routers"
    post:
      tags: ["router"]
      summary: "Create new router in project"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project to save router"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          description: "router configuration to save"
          schema:
            $ref: "#/definitions/RouterConfig"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Router"
        400:
          description: "Invalid project_id or router configuration"
        500:
          description: "Unable to save configuration"

  "/projects/{project_id}/routers/{router_id}":
    get:
      tags: ["router"]
      summary: "Get router belonging to project by ID"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project to retrieve routers from"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Router"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router found"
    put:
      tags: ["router"]
      summary: "Update router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project of the router"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to update"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          description: "router configuration to save"
          schema:
            $ref: "#/definitions/RouterConfig"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Router"
        400:
          description: "Invalid project_id, router_id or router configuration"
        500:
          description: "Unable to save configuration"

    delete:
      tags: ["router"]
      summary: "Delete router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project of the router"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to delete"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              router_id:
                type: "integer"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "Router not found"
        500:
          description: "Unable to delete router"
  
  "/projects/{project_id}/routers/{router_id}/deploy":
    post:
      tags: ["router"]
      summary: "Deploy the current router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          type: "integer"
          required: true
      responses:
        202:
          description: "Accepted"
          schema:
            type: object
            properties:
              router_id:
                type: "integer"
              version:
                type: "integer"
        400:
          description: "Invalid project_id, router_id or deploy request"
        404:
          description: "No router version found"
  
  "/projects/{project_id}/routers/{router_id}/undeploy":
    post:
      tags: ["router"]
      summary: "Undeploy router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to undeploy"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              router_id:
                type: "integer"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "Router not found"
        500:
          description: "Error undeploying router version"

  "/projects/{project_id}/routers/{router_id}/versions":
    get:
      tags: ["router"]
      summary: "List router config versions"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project to retrieve routers from"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RouterVersion"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router versions found"

  "/projects/{project_id}/routers/{router_id}/versions/{version}":
    get:
      tags: ["router"]
      summary: "Get specific router config version"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project to retrieve routers from"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be retrieved"
          type: "integer"
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to be retrieved"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RouterVersion"
        400:
          description: "Invalid project_id, router_id or version_id"
        404:
          description: "No router version found"

    delete:
      tags: ["router"]
      summary: "Delete router version"
      parameters:
        - in: "path"
          name: "project_id"
          description: "project id of the project of the router"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router"
          type: "integer"
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to delete"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              router_id:
                type: "integer"
              version:
                type: "integer"
        400:
          description: "Invalid project_id, router_id or version"
        404:
          description: "Router version not found"
        500:
          description: "Unable to delete router version"

  "/projects/{project_id}/routers/{router_id}/versions/{version}/deploy":
    post:
      tags: ["router"]
      summary: "Deploy specified version of router configuration"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          type: "integer"
          required: true
        - in: "path"
          name: "version"
          description: "version of router configuration to be deployed"
          type: "integer"
          required: true
      responses:
        202:
          description: "Accepted"
          schema:
            type: object
            properties:
              router_id:
                type: "integer"
              version:
                type: "integer"
        400:
          description: "Invalid project_id, router_id, version_id or deploy request"
        404:
          description: "No router version found"

  "/projects/{project_id}/routers/{router_id}/logs":
    get:
      tags: ["logs"]
      summary: "List logs for a router, default to 'router' component type and the currently deployed version"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router"
          type: "integer"
          required: true
        - in: "query"
          name: "component_type"
          description: "component type of the router to get the logs from, default to 'router' component type"
          type: "string"
          enum: ["router", "enricher", "ensembler"]
          required: false
        - in: "query"
          name: "container"
          description: "container to get the logs from, default to 'user-container', the default container name in Knative"
          type: "string"
          required: false
        - in: "query"
          name: "since_time"
          description: "RFC 3399 timestamp from which to retrieve the logs e.g. 2002-10-02T15:00:00Z. The logs retrieved will have timestamp after (but not including) since_time"
          type: "string"
          required: false
        - in: "query"
          name: "tail_lines"
          description: "number of lines from the end of the logs to retrieve. If both tail_lines and head_lines are set, tail_lines will be ignored"
          type: "string"
          required: false
        - in: "query"
          name: "head_lines"
          description: "number of lines from the start of the logs to retrieve. If both tail_lines and head_lines are set, tail_lines will be ignored"
          type: "string"
          required: false
        - in: "query"
          name: "previous"
          description: "if true, return the logs from previous terminated container in all pods, default to false"
          type: "boolean"
          required: false
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PodLog"
        400:
          description: "Invalid value for the router id or query strings"
        500:
          description: "Failed to list pod logs due to internal error"

  "/projects/{project_id}/routers/{router_id}/versions/{version}/logs":
    get:
      tags: ["logs"]
      summary: "List logs for a router with a specific version, default to 'router' component type"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router"
          type: "integer"
          required: true
        - in: "path"
          name: "version"
          description: "router version value to get the logs from"
          type: "string"
          required: true
        - in: "query"
          name: "component_type"
          description: "component type of the router to get the logs from, default to 'router' component type"
          type: "string"
          enum: ["router", "enricher", "ensembler"]
          required: false
        - in: "query"
          name: "container"
          description: "container to get the logs from, default to 'user-container', the default container name in Knative"
          type: "string"
          required: false
        - in: "query"
          name: "since_time"
          description: "RFC 3399 timestamp from which to retrieve the logs e.g. 2002-10-02T15:00:00Z"
          type: "string"
          required: false
        - in: "query"
          name: "tail_lines"
          description: "number of lines from the end of the logs to retrieve, this takes priority over 'since_time'"
          type: "string"
          required: false
        - in: "query"
          name: "previous"
          description: "if true, return the logs from previous terminated container in all pods, default to false"
          type: "boolean"
          required: false
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PodLog"
        400:
          description: "Invalid value for the router, version id or query strings"
        500:
          description: "Failed to list pod logs due to internal error"

  "/projects/{project_id}/routers/{router_id}/alerts":
    get:
      tags: ["alerts"]
      summary: "List alerts for a router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router for the alerts"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Alert"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "project_id or router_id not found"
        500:
          description: "Error retrieving the alerts for the router"
    post:
      tags: ["alerts"]
      summary: "Create a new alert for a router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router for the alert"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          description: "alert specification"
          schema:
            $ref: "#/definitions/Alert"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "project_id or router_id not found"
        500:
          description: "Error creating new alert"

  "/projects/{project_id}/routers/{router_id}/alerts/{alert_id}":
    get:
      tags: ["alerts"]
      summary: "Get the alert for a router by ID"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router for the alerts"
          type: "integer"
          required: true
        - in: "path"
          name: "alert_id"
          description: "id of the alert"
          type: "integer"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
        400:
          description: "Invalid project_id, router_id or alert_id"
        404:
          description: "Alert not found"
        500:
          description: "Error retrieving the alert"
    put:
      tags: ["alerts"]
      summary: "Update the alert for a router by ID"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router for the alerts"
          type: "integer"
          required: true
        - in: "path"
          name: "alert_id"
          description: "id of the alert"
          type: "integer"
          required: true
        - in: "body"
          name: "body"
          description: "alert specification"
          schema:
            $ref: "#/definitions/Alert"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
        400:
          description: "Invalid project_id, router_id or alert_id"
        404:
          description: "Alert not found"
        500:
          description: "Error updating the alert"
    delete:
      tags: ["alerts"]
      summary: "Delete the alert for a router by ID"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router for the alerts"
          type: "integer"
          required: true
        - in: "path"
          name: "alert_id"
          description: "id of the alert"
          type: "integer"
          required: true
      responses:
        200:
          description: "Alert deleted successfully"
        400:
          description: "Invalid project_id, router_id or alert_id"
        404:
          description: "Alert not found"
        500:
          description: "Error deleting the alert"

  "/experiment-engines":
    get:
      tags: ["experiments"]
      summary: "List the available experiment engines"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExperimentEngine"
        500:
          description: "Error querying experiment engines"

  "/experiment-engines/{engine}/clients":
    get:
      tags: ["experiments"]
      summary: "List the clients configured on the given experiment engine"
      parameters:
        - in: "path"
          name: "engine"
          description: "name of the experiment engine"
          type: "string"
          required: true
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExperimentClient"
        400:
          description: "Invalid engine name"
        500:
          description: "Error querying experiment engine clients"
  
  "/experiment-engines/{engine}/experiments":
    get:
      tags: ["experiments"]
      summary: "List the experiments configured on the given experiment engine"
      parameters:
        - in: "path"
          name: "engine"
          description: "name of the experiment engine"
          type: "string"
          required: true
        - in: "query"
          name: "client_id"
          description: "internal (unique) id of the client to filter experiments by"
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Experiment"
        400:
          description: "Invalid engine name"
        500:
          description: "Error querying experiments for the given experiment engine"
  
  "/experiment-engines/{engine}/variables":
    get:
      tags: ["experiments"]
      summary: "List the variables configured for the given client and/or experiment(s)"
      parameters:
        - in: "path"
          name: "engine"
          description: "name of the experiment engine"
          type: "string"
          required: true
        - in: "query"
          name: "client_id"
          description: "internal (unique) id of the client."
          type: "string"
        - in: "query"
          name: "experiment_id"
          description: "comma-separated internal (unique) ids of the experiments."
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ExperimentVariables"
        400:
          description: "Invalid engine name, client_id or experiment_id(s)"
        500:
          description: "Error querying variables for the given client / experiment(s)"

  "/projects/{project_id}/routers/{router_id}/events":
    get:
      tags: ["router"]
      summary: "Get deployment events associated with this router"
      parameters:
        - in: "path"
          name: "project_id"
          description: "id of the project that the router belongs to"
          type: "integer"
          required: true
        - in: "path"
          name: "router_id"
          description: "id of the router to be deployed"
          type: "integer"
          required: true
      responses:
        200:
          description: "Get events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid project_id or router_id"
        404:
          description: "No router version found"

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

security:
  - Bearer: []

definitions:
  Router:
    type: "object"
    properties:
      id:
        type: "integer"
        readOnly: true
      name:
        type: "string"
      created_at:
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        type: "string"
        format: "date-time"
        readOnly: true
      project:
        type: "integer"
      environment_name:
        type: "string"
      endpoint:
        type: "string"
      status:
        $ref: "#/definitions/RouterStatus"
      config:
        $ref: "#/definitions/RouterVersion"

  RouterVersion:
    type: "object"
    properties:
      id:
        type: "integer"
        readOnly: true
      created_at:
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        type: "string"
        format: "date-time"
        readOnly: true
      router:
        type: "object"
        properties:
          Router:
            type: "object"
            properties:
              id:
                type: "integer"
              name:
                type: "string"
              created_at:
                type: "string"
                format: "date-time"
                readOnly: true
              updated_at:
                type: "string"
                format: "date-time"
                readOnly: true
              project:
                type: "integer"
              environment_name:
                type: "string"
              endpoint:
                type: "string"
              status:
                $ref: "#/definitions/RouterStatus"
      version:
        type: "integer"
      status:
        $ref: "#/definitions/RouterVersionStatus"
      error:
        type: "string"
      image:
        type: "string"
      routes:
        type: "array"
        items:
          $ref: "#/definitions/Route"
      default_route:
        type: "string"
      experiment_engine:
        type: "object"
        properties:
          type:
            $ref: "#/definitions/ExperimentEngineType"
          config:
            $ref: "#/definitions/ExperimentConfigResponse"
      resource_request:
        $ref: "#/definitions/ResourceRequest"
      timeout:
        type: "string"
      log_config:
        type: "object"
        properties:
          log_level:
            $ref: "#/definitions/LogLevel"
          custom_metrics_enabled:
            type: "boolean"
          fiber_debug_log_enabled:
            type: "boolean"
          jaeger_enabled:
            type: "boolean"
          result_logger_type:
            $ref: "#/definitions/ResultLoggerType"
          bigquery_config:
            $ref: "#/definitions/BigQueryConfig"
          kafka_config:
            $ref: "#/definitions/KafkaConfig"
      enricher:
        $ref: "#/definitions/Enricher"
      ensembler:
        $ref: "#/definitions/Ensembler"

  RouterConfig:
    type: "object"
    required:
    - environment_name
    - name
    - config
    properties:
      environment_name:
        type: "string"
      name:
        type: "string"
      config:
        type: "object"
        required:
        - routes
        - default_route_id
        - experiment_engine
        - timeout
        - log_config
        properties:
          routes:
            type: "array"
            items:
              $ref: "#/definitions/Route"
          rules:
            type: "array"
            items:
              $ref: "#/definitions/TrafficRule"
          default_route_id:
            type: "string"
          experiment_engine:
            type: "object"
            properties:
              type:
                $ref: "#/definitions/ExperimentEngineType"
              config:
                $ref: "#/definitions/ExperimentConfigRequest"
          resource_request:
            $ref: "#/definitions/ResourceRequest"
          timeout:
            type: "string"
          log_config:
            type: "object"
            properties:
              result_logger_type:
                $ref: "#/definitions/ResultLoggerType"
              bigquery_config:
                $ref: "#/definitions/BigQueryConfig"
              kafka_config:
                $ref: "#/definitions/KafkaConfig"
          enricher:
            $ref: "#/definitions/Enricher"
          ensembler:
            $ref: "#/definitions/Ensembler"

  Route:
    type: "object"
    required:
    - id
    - type
    - endpoint
    - timeout
    properties:
      id:
        type: "string"
      type:
        type: "string"
      endpoint:
        type: "string"
      timeout:
        type: "string"

  TrafficRule:
    type: "object"
    required:
    - conditions
    - routes
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/TrafficRuleCondition"
      routes:
        type: "array"
        description: "List of IDs of the routes, that should be activated by this rule"
        items:
          type: "string"

  TrafficRuleCondition:
    type: "object"
    required:
    - field_source
    - field
    - operator
    - values
    properties:
      field_source:
        $ref: "#/definitions/FieldSource"
      field:
        type: "string"
        description: >
          If `field_source` is `header`, then `field` should contain the name of the request header,
          otherwise, if `field_source` is `payload`, then `field` should be a valid json path
      operator:
        type: "string"
        enum:
        - "in"
      values:
        type: "array"
        items:
          type: "string"

  Enricher:
    type: "object"
    required:
    - image
    - resource_request
    - endpoint
    - timeout
    - port
    - env
    properties:
      image:
        type: "string"
      resource_request:
        $ref: "#/definitions/ResourceRequest"
      endpoint:
        type: "string"
      timeout:
        type: "string"
      port:
        type: "integer"
      env:
        type: "array"
        items:
          $ref: "#/definitions/EnvVar"
      service_account:
        type: "string"
        description: >
          (Optional) Name of the secret registered in the current MLP project that contains the Google service account
          JSON key. This secret will be mounted as a file inside the container and the environment variable
          GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
        example: "secret-name-for-google-service-account"

  Ensembler:
    type: "object"
    required:
    - type
    properties:
      type:
        description: "type of ensembler"
        type: "string"
        enum: ["standard", "docker"]
      standard_config:
        $ref: "#/definitions/EnsemblerStandardConfig"
      docker_config:
        $ref: "#/definitions/EnsemblerDockerConfig"

  EnsemblerStandardConfig:
    description: "ensembler config when ensembler type is standard"
    type: "object"
    required:
    - "experiment_mappings"
    properties:
      experiment_mappings:
        type: "array"
        items:
          type: "object"
          required:
          - "experiment"
          - "treatment"
          - "route"
          properties:
            experiment:
              description: "experiment name from the configured experiment engine"
              type: "string"
              example: "experiment-1"
            treatment:
              description: "treatment name of the experiment"
              type: "string"
              example: "treatment-1"
            route:
              description: "route id of the routes configured in the router"
              type: "string"
              example: "route-1"

  EnsemblerDockerConfig:
    description: "ensembler config when ensembler type is docker"
    type: "object"
    required:
    - image
    - resource_request
    - endpoint
    - timeout
    - port
    - env
    properties:
      image:
        type: "string"
      resource_request:
        $ref: "#/definitions/ResourceRequest"
      endpoint:
        type: "string"
      timeout:
        type: "string"
      port:
        type: "integer"
      env:
        type: "array"
        items:
          $ref: "#/definitions/EnvVar"
      service_account:
        type: "string"
        description: >
          (Optional) Name of the secret registered in the current MLP project that contains the Google service account
          JSON key. This secret will be mounted as a file inside the container and the environment variable
          GOOGLE_APPLICATION_CREDENTIALS will point to the service account file."
        example: "secret-name-for-google-service-account"

  ResourceRequest:
    type: "object"
    properties:
      min_replica:
        type: "integer"
      max_replica:
        type: "integer"
      cpu_request:
        type: "string"
      memory_request:
        type: "string"

  EnvVar:
    type: "object"
    required:
    - name
    properties:
      name:
        type: "string"
      value:
        type: "string"

  BigQueryConfig:
    type: "object"
    required:
    - table
    - service_account_secret
    properties:
      table:
        type: "string"
      service_account_secret:
        type: "string"
  
  KafkaConfig:
    type: "object"
    required:
    - brokers
    - topic
    properties:
      brokers:
        type: "string"
        description: Comma-separated list of host and port pairs that are the addresses of the Kafka brokers.
      topic:
        type: "string"

  Alert:
    type: "object"
    required:
      - environment
      - team
      - metric
    properties:
      id:
        type: "integer"
        readOnly: true
      created_at:
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        type: "string"
        format: "date-time"
        readOnly: true
      environment:
        type: "string"
      team:
        type: "string"
      service:
        type: "string"
      metric:
        type: "string"
        enum: ["throughput","latency95p","error_rate","cpu_util","memory_util"]
      warning_threshold:
        type: "number"
      critical_threshold:
        type: "number"
      duration:
        type: "string"

  PodLog:
    type: object
    description: "PodLog object contains a log item from a container in a pod"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
        description: "Log timestamp in RFC3339 format"
        example: "2020-07-10T21:13:51Z"
      environment:
        type: "string"
        description: "Environment name of the router running the container that produces this log"
        example: "staging"
      namespace:
        type: "string"
        description: "Kubernetes namespace where the pod running the container is created"
        example: "cartography"
      pod_name:
        type: "string"
        description: "Pod name running the container that produces this log"
        example: "nearby-turing-router-90-deployment-7b49b4bcb5-jlr7n"
      container_name:
        type: "string"
        description: "Container name that produces this log"
        example: "user-container"
      text_payload:
        type: "string"
        description: "Log in text format, either text_payload or json_payload will be set but not both"
        example: "Example log from a container"
      json_payload:
        type: "object"
        description: "Log in JSON format, either text_payload or json_payload will be set but not both"
        example: {"level":"info","msg":"Initializing Nop Result Logger","router_version":"test-1-1.integration-test","ts":1594386832.6632557}

  Event:
    type: "object"
    properties:
      id:
        type: "integer"
        readOnly: true
      created_at:
        type: "string"
        format: "date-time"
        readOnly: true
      updated_at:
        type: "string"
        format: "date-time"
        readOnly: true
      version:
        type: "integer"
      event_type:
        type: "string"
        enum: ["info", "error"]
      stage:
        type: "string"
      message:
        type: "string"

  ExperimentEngine:
    type: "object"
    properties:
      name:
        type: "string"
      client_selection_enabled:
        type: "boolean"
      experiment_selection_enabled:
        type: "boolean"
  
  ExperimentClient:
    type: "object"
    required:
      - id
      - username
    properties:
      id:
        type: "string"
      username:
        type: "string"
      passkey:
        type: "string"

  Experiment:
    type: "object"
    required:
      - id
      - name
      - client_id
    properties:
      id:
        type: "string"
      name:
        type: "string"
      client_id:
        type: "string"
      variants:
        type: "array"
        description: "List of variants in the experiment"
        items:
          type: "object"
          properties:
            name:
              type: "string"
              example: control
  
  ExperimentVariable:
    type: "object"
    properties:
      name:
        type: "string"
      required:
        type: "boolean"
      type:
        type: "string"
        enum:
          - "unsupported"
          - "unit"
          - "filter"
  
  ExperimentVariableConfig:
    type: "object"
    properties:
      name:
        type: "string"
      required:
        type: "boolean"
      field:
        type: "string"
      field_source:
        $ref: "#/definitions/FieldSource"

  ExperimentVariables:
    type: "object"
    properties:
      client_variables:
        description: "list of variables defined for the client"
        type: "array"
        items:
          $ref: "#/definitions/ExperimentVariable"
      experiment_variables:
        description: "map of experiment id to its variables"
        type: "object"
        properties:
          default:
            type: "array"
            items:
              $ref: "#/definitions/ExperimentVariable"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/ExperimentVariable"
      config:
        type: array
        items:
          $ref: "#/definitions/ExperimentVariableConfig"
        
  ExperimentConfigRequest:
    type: "object"
    properties:
      client:
        $ref: "#/definitions/ExperimentClient"
      experiments:
        type: array
        items:
          $ref: "#/definitions/Experiment"
      variables:
        $ref: "#/definitions/ExperimentVariables"
  
  ExperimentConfigResponse:
    type: "object"
    properties:
      deployment:
        type: "object"
        properties:
          endpoint:
            type: "string"
          timeout:
            type: "string"
            description: "timeout duration for responses from the XP API server"
            example: "60ms"
      client:
        $ref: "#/definitions/ExperimentClient"
      experiments:
        type: array
        items:
          $ref: "#/definitions/Experiment"
      variables:
        $ref: "#/definitions/ExperimentVariables"
        
  # Enums
  ExperimentEngineType:
    type: "string"
    enum:
      - "nop"
    default: "nop"

  ResultLoggerType:
    type: "string"
    enum:
      - "nop"
      - "console"
      - "bigquery"
      - "kafka"
    default: "nop"

  RouterStatus:
    type: "string"
    enum:
      - "deployed"
      - "undeployed"
      - "failed"
      - "pending"
    default: "pending"

  RouterVersionStatus:
    type: "string"
    enum:
      - "deployed"
      - "undeployed"
      - "failed"
      - "pending"
    default: "pending"

  LogLevel:
    type: "string"
    enum:
      - "DEBUG"
      - "INFO"
      - "WARN"
      - "ERROR"
  
  FieldSource:
    type: "string"
    enum:
      - "header"
      - "payload"
