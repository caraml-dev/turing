/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnsemblingJobEnsemblerSpecResult struct for EnsemblingJobEnsemblerSpecResult
type EnsemblingJobEnsemblerSpecResult struct {
	Type EnsemblingJobResultType `json:"type"`
	ItemType *EnsemblingJobResultType `json:"item_type,omitempty"`
	ColumnName string `json:"column_name"`
}

// NewEnsemblingJobEnsemblerSpecResult instantiates a new EnsemblingJobEnsemblerSpecResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnsemblingJobEnsemblerSpecResult(type_ EnsemblingJobResultType, columnName string) *EnsemblingJobEnsemblerSpecResult {
	this := EnsemblingJobEnsemblerSpecResult{}
	this.Type = type_
	this.ColumnName = columnName
	return &this
}

// NewEnsemblingJobEnsemblerSpecResultWithDefaults instantiates a new EnsemblingJobEnsemblerSpecResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnsemblingJobEnsemblerSpecResultWithDefaults() *EnsemblingJobEnsemblerSpecResult {
	this := EnsemblingJobEnsemblerSpecResult{}
	return &this
}

// GetType returns the Type field value
func (o *EnsemblingJobEnsemblerSpecResult) GetType() EnsemblingJobResultType {
	if o == nil {
		var ret EnsemblingJobResultType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnsemblingJobEnsemblerSpecResult) GetTypeOk() (*EnsemblingJobResultType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnsemblingJobEnsemblerSpecResult) SetType(v EnsemblingJobResultType) {
	o.Type = v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *EnsemblingJobEnsemblerSpecResult) GetItemType() EnsemblingJobResultType {
	if o == nil || o.ItemType == nil {
		var ret EnsemblingJobResultType
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJobEnsemblerSpecResult) GetItemTypeOk() (*EnsemblingJobResultType, bool) {
	if o == nil || o.ItemType == nil {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *EnsemblingJobEnsemblerSpecResult) HasItemType() bool {
	if o != nil && o.ItemType != nil {
		return true
	}

	return false
}

// SetItemType gets a reference to the given EnsemblingJobResultType and assigns it to the ItemType field.
func (o *EnsemblingJobEnsemblerSpecResult) SetItemType(v EnsemblingJobResultType) {
	o.ItemType = &v
}

// GetColumnName returns the ColumnName field value
func (o *EnsemblingJobEnsemblerSpecResult) GetColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value
// and a boolean to check if the value has been set.
func (o *EnsemblingJobEnsemblerSpecResult) GetColumnNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ColumnName, true
}

// SetColumnName sets field value
func (o *EnsemblingJobEnsemblerSpecResult) SetColumnName(v string) {
	o.ColumnName = v
}

func (o EnsemblingJobEnsemblerSpecResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ItemType != nil {
		toSerialize["item_type"] = o.ItemType
	}
	if true {
		toSerialize["column_name"] = o.ColumnName
	}
	return json.Marshal(toSerialize)
}

type NullableEnsemblingJobEnsemblerSpecResult struct {
	value *EnsemblingJobEnsemblerSpecResult
	isSet bool
}

func (v NullableEnsemblingJobEnsemblerSpecResult) Get() *EnsemblingJobEnsemblerSpecResult {
	return v.value
}

func (v *NullableEnsemblingJobEnsemblerSpecResult) Set(val *EnsemblingJobEnsemblerSpecResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsemblingJobEnsemblerSpecResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsemblingJobEnsemblerSpecResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsemblingJobEnsemblerSpecResult(val *EnsemblingJobEnsemblerSpecResult) *NullableEnsemblingJobEnsemblerSpecResult {
	return &NullableEnsemblingJobEnsemblerSpecResult{value: val, isSet: true}
}

func (v NullableEnsemblingJobEnsemblerSpecResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsemblingJobEnsemblerSpecResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


