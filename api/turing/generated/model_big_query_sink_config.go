/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BigQuerySinkConfig struct for BigQuerySinkConfig
type BigQuerySinkConfig struct {
	Table string `json:"table"`
	StagingBucket string `json:"staging_bucket"`
	Options map[string]string `json:"options,omitempty"`
}

// NewBigQuerySinkConfig instantiates a new BigQuerySinkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigQuerySinkConfig(table string, stagingBucket string) *BigQuerySinkConfig {
	this := BigQuerySinkConfig{}
	this.Table = table
	this.StagingBucket = stagingBucket
	return &this
}

// NewBigQuerySinkConfigWithDefaults instantiates a new BigQuerySinkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigQuerySinkConfigWithDefaults() *BigQuerySinkConfig {
	this := BigQuerySinkConfig{}
	return &this
}

// GetTable returns the Table field value
func (o *BigQuerySinkConfig) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *BigQuerySinkConfig) GetTableOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *BigQuerySinkConfig) SetTable(v string) {
	o.Table = v
}

// GetStagingBucket returns the StagingBucket field value
func (o *BigQuerySinkConfig) GetStagingBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StagingBucket
}

// GetStagingBucketOk returns a tuple with the StagingBucket field value
// and a boolean to check if the value has been set.
func (o *BigQuerySinkConfig) GetStagingBucketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StagingBucket, true
}

// SetStagingBucket sets field value
func (o *BigQuerySinkConfig) SetStagingBucket(v string) {
	o.StagingBucket = v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BigQuerySinkConfig) GetOptions() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BigQuerySinkConfig) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return &o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *BigQuerySinkConfig) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *BigQuerySinkConfig) SetOptions(v map[string]string) {
	o.Options = v
}

func (o BigQuerySinkConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["table"] = o.Table
	}
	if true {
		toSerialize["staging_bucket"] = o.StagingBucket
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableBigQuerySinkConfig struct {
	value *BigQuerySinkConfig
	isSet bool
}

func (v NullableBigQuerySinkConfig) Get() *BigQuerySinkConfig {
	return v.value
}

func (v *NullableBigQuerySinkConfig) Set(val *BigQuerySinkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBigQuerySinkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBigQuerySinkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigQuerySinkConfig(val *BigQuerySinkConfig) *NullableBigQuerySinkConfig {
	return &NullableBigQuerySinkConfig{value: val, isSet: true}
}

func (v NullableBigQuerySinkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigQuerySinkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


