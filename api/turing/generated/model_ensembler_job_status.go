/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnsemblerJobStatus the model 'EnsemblerJobStatus'
type EnsemblerJobStatus string

// List of EnsemblerJobStatus
const (
	ENSEMBLERJOBSTATUS_PENDING           EnsemblerJobStatus = "pending"
	ENSEMBLERJOBSTATUS_BUILDING          EnsemblerJobStatus = "building"
	ENSEMBLERJOBSTATUS_RUNNING           EnsemblerJobStatus = "running"
	ENSEMBLERJOBSTATUS_TERMINATING       EnsemblerJobStatus = "terminating"
	ENSEMBLERJOBSTATUS_TERMINATED        EnsemblerJobStatus = "terminated"
	ENSEMBLERJOBSTATUS_COMPLETED         EnsemblerJobStatus = "completed"
	ENSEMBLERJOBSTATUS_FAILED            EnsemblerJobStatus = "failed"
	ENSEMBLERJOBSTATUS_FAILED_SUBMISSION EnsemblerJobStatus = "failed_submission"
	ENSEMBLERJOBSTATUS_FAILED_BUILDING   EnsemblerJobStatus = "failed_building"
)

var allowedEnsemblerJobStatusEnumValues = []EnsemblerJobStatus{
	"pending",
	"building",
	"running",
	"terminating",
	"terminated",
	"completed",
	"failed",
	"failed_submission",
	"failed_building",
}

func (v *EnsemblerJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnsemblerJobStatus(value)
	for _, existing := range allowedEnsemblerJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnsemblerJobStatus", value)
}

// NewEnsemblerJobStatusFromValue returns a pointer to a valid EnsemblerJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnsemblerJobStatusFromValue(v string) (*EnsemblerJobStatus, error) {
	ev := EnsemblerJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnsemblerJobStatus: valid values are %v", v, allowedEnsemblerJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnsemblerJobStatus) IsValid() bool {
	for _, existing := range allowedEnsemblerJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnsemblerJobStatus value
func (v EnsemblerJobStatus) Ptr() *EnsemblerJobStatus {
	return &v
}

type NullableEnsemblerJobStatus struct {
	value *EnsemblerJobStatus
	isSet bool
}

func (v NullableEnsemblerJobStatus) Get() *EnsemblerJobStatus {
	return v.value
}

func (v *NullableEnsemblerJobStatus) Set(val *EnsemblerJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsemblerJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsemblerJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsemblerJobStatus(val *EnsemblerJobStatus) *NullableEnsemblerJobStatus {
	return &NullableEnsemblerJobStatus{value: val, isSet: true}
}

func (v NullableEnsemblerJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsemblerJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
