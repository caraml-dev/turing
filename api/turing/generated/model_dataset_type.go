/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DatasetType the model 'DatasetType'
type DatasetType string

// List of DatasetType
const (
	DATASETTYPE_BQ DatasetType = "BQ"
)

var allowedDatasetTypeEnumValues = []DatasetType{
	"BQ",
}

func (v *DatasetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatasetType(value)
	for _, existing := range allowedDatasetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatasetType", value)
}

// NewDatasetTypeFromValue returns a pointer to a valid DatasetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasetTypeFromValue(v string) (*DatasetType, error) {
	ev := DatasetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatasetType: valid values are %v", v, allowedDatasetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatasetType) IsValid() bool {
	for _, existing := range allowedDatasetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatasetType value
func (v DatasetType) Ptr() *DatasetType {
	return &v
}

type NullableDatasetType struct {
	value *DatasetType
	isSet bool
}

func (v NullableDatasetType) Get() *DatasetType {
	return v.value
}

func (v *NullableDatasetType) Set(val *DatasetType) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetType) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetType(val *DatasetType) *NullableDatasetType {
	return &NullableDatasetType{value: val, isSet: true}
}

func (v NullableDatasetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
