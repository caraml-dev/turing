/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BigQueryDatasetConfig struct for BigQueryDatasetConfig
type BigQueryDatasetConfig struct {
	Table *string `json:"table,omitempty"`
	Features []string `json:"features,omitempty"`
	Query *string `json:"query,omitempty"`
	Options map[string]string `json:"options,omitempty"`
}

// NewBigQueryDatasetConfig instantiates a new BigQueryDatasetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigQueryDatasetConfig() *BigQueryDatasetConfig {
	this := BigQueryDatasetConfig{}
	return &this
}

// NewBigQueryDatasetConfigWithDefaults instantiates a new BigQueryDatasetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigQueryDatasetConfigWithDefaults() *BigQueryDatasetConfig {
	this := BigQueryDatasetConfig{}
	return &this
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *BigQueryDatasetConfig) GetTable() string {
	if o == nil || o.Table == nil {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigQueryDatasetConfig) GetTableOk() (*string, bool) {
	if o == nil || o.Table == nil {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *BigQueryDatasetConfig) HasTable() bool {
	if o != nil && o.Table != nil {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *BigQueryDatasetConfig) SetTable(v string) {
	o.Table = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BigQueryDatasetConfig) GetFeatures() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BigQueryDatasetConfig) GetFeaturesOk() (*[]string, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return &o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *BigQueryDatasetConfig) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *BigQueryDatasetConfig) SetFeatures(v []string) {
	o.Features = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *BigQueryDatasetConfig) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigQueryDatasetConfig) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *BigQueryDatasetConfig) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *BigQueryDatasetConfig) SetQuery(v string) {
	o.Query = &v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BigQueryDatasetConfig) GetOptions() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BigQueryDatasetConfig) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return &o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *BigQueryDatasetConfig) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *BigQueryDatasetConfig) SetOptions(v map[string]string) {
	o.Options = v
}

func (o BigQueryDatasetConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Table != nil {
		toSerialize["table"] = o.Table
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableBigQueryDatasetConfig struct {
	value *BigQueryDatasetConfig
	isSet bool
}

func (v NullableBigQueryDatasetConfig) Get() *BigQueryDatasetConfig {
	return v.value
}

func (v *NullableBigQueryDatasetConfig) Set(val *BigQueryDatasetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBigQueryDatasetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBigQueryDatasetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigQueryDatasetConfig(val *BigQueryDatasetConfig) *NullableBigQueryDatasetConfig {
	return &NullableBigQueryDatasetConfig{value: val, isSet: true}
}

func (v NullableBigQueryDatasetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigQueryDatasetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


