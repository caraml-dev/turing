/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EnsemblingJob A JSON object that represents an ensembling job for batch experiment use cases
type EnsemblingJob struct {
	Id              *int32                `json:"id,omitempty"`
	Name            *string               `json:"name,omitempty"`
	ProjectId       *int32                `json:"project_id,omitempty"`
	EnsemblerId     *int32                `json:"ensembler_id,omitempty"`
	EnvironmentName *string               `json:"environment_name,omitempty"`
	InfraConfig     *EnsemblerInfraConfig `json:"infra_config,omitempty"`
	JobConfig       *EnsemblerConfig      `json:"job_config,omitempty"`
	Status          *EnsemblerJobStatus   `json:"status,omitempty"`
	Error           *string               `json:"error,omitempty"`
	CreatedAt       *time.Time            `json:"created_at,omitempty"`
	UpdatedAt       *time.Time            `json:"updated_at,omitempty"`
}

// NewEnsemblingJob instantiates a new EnsemblingJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnsemblingJob() *EnsemblingJob {
	this := EnsemblingJob{}
	return &this
}

// NewEnsemblingJobWithDefaults instantiates a new EnsemblingJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnsemblingJobWithDefaults() *EnsemblingJob {
	this := EnsemblingJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnsemblingJob) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnsemblingJob) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EnsemblingJob) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnsemblingJob) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnsemblingJob) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnsemblingJob) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *EnsemblingJob) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *EnsemblingJob) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *EnsemblingJob) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetEnsemblerId returns the EnsemblerId field value if set, zero value otherwise.
func (o *EnsemblingJob) GetEnsemblerId() int32 {
	if o == nil || o.EnsemblerId == nil {
		var ret int32
		return ret
	}
	return *o.EnsemblerId
}

// GetEnsemblerIdOk returns a tuple with the EnsemblerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetEnsemblerIdOk() (*int32, bool) {
	if o == nil || o.EnsemblerId == nil {
		return nil, false
	}
	return o.EnsemblerId, true
}

// HasEnsemblerId returns a boolean if a field has been set.
func (o *EnsemblingJob) HasEnsemblerId() bool {
	if o != nil && o.EnsemblerId != nil {
		return true
	}

	return false
}

// SetEnsemblerId gets a reference to the given int32 and assigns it to the EnsemblerId field.
func (o *EnsemblingJob) SetEnsemblerId(v int32) {
	o.EnsemblerId = &v
}

// GetEnvironmentName returns the EnvironmentName field value if set, zero value otherwise.
func (o *EnsemblingJob) GetEnvironmentName() string {
	if o == nil || o.EnvironmentName == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetEnvironmentNameOk() (*string, bool) {
	if o == nil || o.EnvironmentName == nil {
		return nil, false
	}
	return o.EnvironmentName, true
}

// HasEnvironmentName returns a boolean if a field has been set.
func (o *EnsemblingJob) HasEnvironmentName() bool {
	if o != nil && o.EnvironmentName != nil {
		return true
	}

	return false
}

// SetEnvironmentName gets a reference to the given string and assigns it to the EnvironmentName field.
func (o *EnsemblingJob) SetEnvironmentName(v string) {
	o.EnvironmentName = &v
}

// GetInfraConfig returns the InfraConfig field value if set, zero value otherwise.
func (o *EnsemblingJob) GetInfraConfig() EnsemblerInfraConfig {
	if o == nil || o.InfraConfig == nil {
		var ret EnsemblerInfraConfig
		return ret
	}
	return *o.InfraConfig
}

// GetInfraConfigOk returns a tuple with the InfraConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetInfraConfigOk() (*EnsemblerInfraConfig, bool) {
	if o == nil || o.InfraConfig == nil {
		return nil, false
	}
	return o.InfraConfig, true
}

// HasInfraConfig returns a boolean if a field has been set.
func (o *EnsemblingJob) HasInfraConfig() bool {
	if o != nil && o.InfraConfig != nil {
		return true
	}

	return false
}

// SetInfraConfig gets a reference to the given EnsemblerInfraConfig and assigns it to the InfraConfig field.
func (o *EnsemblingJob) SetInfraConfig(v EnsemblerInfraConfig) {
	o.InfraConfig = &v
}

// GetJobConfig returns the JobConfig field value if set, zero value otherwise.
func (o *EnsemblingJob) GetJobConfig() EnsemblerConfig {
	if o == nil || o.JobConfig == nil {
		var ret EnsemblerConfig
		return ret
	}
	return *o.JobConfig
}

// GetJobConfigOk returns a tuple with the JobConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetJobConfigOk() (*EnsemblerConfig, bool) {
	if o == nil || o.JobConfig == nil {
		return nil, false
	}
	return o.JobConfig, true
}

// HasJobConfig returns a boolean if a field has been set.
func (o *EnsemblingJob) HasJobConfig() bool {
	if o != nil && o.JobConfig != nil {
		return true
	}

	return false
}

// SetJobConfig gets a reference to the given EnsemblerConfig and assigns it to the JobConfig field.
func (o *EnsemblingJob) SetJobConfig(v EnsemblerConfig) {
	o.JobConfig = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EnsemblingJob) GetStatus() EnsemblerJobStatus {
	if o == nil || o.Status == nil {
		var ret EnsemblerJobStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetStatusOk() (*EnsemblerJobStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EnsemblingJob) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given EnsemblerJobStatus and assigns it to the Status field.
func (o *EnsemblingJob) SetStatus(v EnsemblerJobStatus) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *EnsemblingJob) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *EnsemblingJob) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *EnsemblingJob) SetError(v string) {
	o.Error = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EnsemblingJob) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EnsemblingJob) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EnsemblingJob) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EnsemblingJob) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnsemblingJob) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EnsemblingJob) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EnsemblingJob) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o EnsemblingJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if o.EnsemblerId != nil {
		toSerialize["ensembler_id"] = o.EnsemblerId
	}
	if o.EnvironmentName != nil {
		toSerialize["environment_name"] = o.EnvironmentName
	}
	if o.InfraConfig != nil {
		toSerialize["infra_config"] = o.InfraConfig
	}
	if o.JobConfig != nil {
		toSerialize["job_config"] = o.JobConfig
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableEnsemblingJob struct {
	value *EnsemblingJob
	isSet bool
}

func (v NullableEnsemblingJob) Get() *EnsemblingJob {
	return v.value
}

func (v *NullableEnsemblingJob) Set(val *EnsemblingJob) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsemblingJob) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsemblingJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsemblingJob(val *EnsemblingJob) *NullableEnsemblingJob {
	return &NullableEnsemblingJob{value: val, isSet: true}
}

func (v NullableEnsemblingJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsemblingJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
