/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	_ "time"
)

// Ensembler - struct for Ensembler
type Ensembler struct {
	PyFuncEnsembler *PyFuncEnsembler
}

// PyFuncEnsemblerAsEnsembler is a convenience function that returns PyFuncEnsembler wrapped in Ensembler
func PyFuncEnsemblerAsEnsembler(v *PyFuncEnsembler) Ensembler {
	return Ensembler{PyFuncEnsembler: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Ensembler) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PyFuncEnsembler
	err = json.Unmarshal(data, &dst.PyFuncEnsembler)
	if err == nil {
		jsonPyFuncEnsembler, _ := json.Marshal(dst.PyFuncEnsembler)
		if string(jsonPyFuncEnsembler) == "{}" { // empty struct
			dst.PyFuncEnsembler = nil
		} else {
			match++
		}
	} else {
		dst.PyFuncEnsembler = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PyFuncEnsembler = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Ensembler)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Ensembler)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Ensembler) MarshalJSON() ([]byte, error) {
	if src.PyFuncEnsembler != nil {
		return json.Marshal(&src.PyFuncEnsembler)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Ensembler) GetActualInstance() interface{} {
	if obj.PyFuncEnsembler != nil {
		return obj.PyFuncEnsembler
	}

	// all schemas are nil
	return nil
}

type NullableEnsembler struct {
	value *Ensembler
	isSet bool
}

func (v NullableEnsembler) Get() *Ensembler {
	return v.value
}

func (v *NullableEnsembler) Set(val *Ensembler) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsembler) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsembler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsembler(val *Ensembler) *NullableEnsembler {
	return &NullableEnsembler{value: val, isSet: true}
}

func (v NullableEnsembler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsembler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
