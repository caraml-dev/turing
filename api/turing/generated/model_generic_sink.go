/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GenericSink struct for GenericSink
type GenericSink struct {
	Type     SinkType `json:"type"`
	Columns  []string `json:"columns,omitempty"`
	SaveMode SaveMode `json:"save_mode"`
}

// NewGenericSink instantiates a new GenericSink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericSink(type_ SinkType, saveMode SaveMode) *GenericSink {
	this := GenericSink{}
	this.Type = type_
	this.SaveMode = saveMode
	return &this
}

// NewGenericSinkWithDefaults instantiates a new GenericSink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericSinkWithDefaults() *GenericSink {
	this := GenericSink{}
	return &this
}

// GetType returns the Type field value
func (o *GenericSink) GetType() SinkType {
	if o == nil {
		var ret SinkType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GenericSink) GetTypeOk() (*SinkType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GenericSink) SetType(v SinkType) {
	o.Type = v
}

// GetColumns returns the Columns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenericSink) GetColumns() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenericSink) GetColumnsOk() (*[]string, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return &o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *GenericSink) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *GenericSink) SetColumns(v []string) {
	o.Columns = v
}

// GetSaveMode returns the SaveMode field value
func (o *GenericSink) GetSaveMode() SaveMode {
	if o == nil {
		var ret SaveMode
		return ret
	}

	return o.SaveMode
}

// GetSaveModeOk returns a tuple with the SaveMode field value
// and a boolean to check if the value has been set.
func (o *GenericSink) GetSaveModeOk() (*SaveMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaveMode, true
}

// SetSaveMode sets field value
func (o *GenericSink) SetSaveMode(v SaveMode) {
	o.SaveMode = v
}

func (o GenericSink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if true {
		toSerialize["save_mode"] = o.SaveMode
	}
	return json.Marshal(toSerialize)
}

type NullableGenericSink struct {
	value *GenericSink
	isSet bool
}

func (v NullableGenericSink) Get() *GenericSink {
	return v.value
}

func (v *NullableGenericSink) Set(val *GenericSink) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericSink) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericSink(val *GenericSink) *NullableGenericSink {
	return &NullableGenericSink{value: val, isSet: true}
}

func (v NullableGenericSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
