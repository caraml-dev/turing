/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SinkType the model 'SinkType'
type SinkType string

// List of SinkType
const (
	SINKTYPE_CONSOLE SinkType = "CONSOLE"
	SINKTYPE_BQ      SinkType = "BQ"
)

var allowedSinkTypeEnumValues = []SinkType{
	"CONSOLE",
	"BQ",
}

func (v *SinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SinkType(value)
	for _, existing := range allowedSinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SinkType", value)
}

// NewSinkTypeFromValue returns a pointer to a valid SinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSinkTypeFromValue(v string) (*SinkType, error) {
	ev := SinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SinkType: valid values are %v", v, allowedSinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SinkType) IsValid() bool {
	for _, existing := range allowedSinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SinkType value
func (v SinkType) Ptr() *SinkType {
	return &v
}

type NullableSinkType struct {
	value *SinkType
	isSet bool
}

func (v NullableSinkType) Get() *SinkType {
	return v.value
}

func (v *NullableSinkType) Set(val *SinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkType(val *SinkType) *NullableSinkType {
	return &NullableSinkType{value: val, isSet: true}
}

func (v NullableSinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
