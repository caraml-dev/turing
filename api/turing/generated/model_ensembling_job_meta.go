/*
 * Turing Minimal Openapi Spec for SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnsemblingJobMeta Ensembling job Metadata
type EnsemblingJobMeta struct {
	Name string `json:"name"`
	Annotations map[string]string `json:"annotations,omitempty"`
}

// NewEnsemblingJobMeta instantiates a new EnsemblingJobMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnsemblingJobMeta(name string) *EnsemblingJobMeta {
	this := EnsemblingJobMeta{}
	this.Name = name
	return &this
}

// NewEnsemblingJobMetaWithDefaults instantiates a new EnsemblingJobMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnsemblingJobMetaWithDefaults() *EnsemblingJobMeta {
	this := EnsemblingJobMeta{}
	return &this
}

// GetName returns the Name field value
func (o *EnsemblingJobMeta) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnsemblingJobMeta) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnsemblingJobMeta) SetName(v string) {
	o.Name = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnsemblingJobMeta) GetAnnotations() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnsemblingJobMeta) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return &o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *EnsemblingJobMeta) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *EnsemblingJobMeta) SetAnnotations(v map[string]string) {
	o.Annotations = v
}

func (o EnsemblingJobMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableEnsemblingJobMeta struct {
	value *EnsemblingJobMeta
	isSet bool
}

func (v NullableEnsemblingJobMeta) Get() *EnsemblingJobMeta {
	return v.value
}

func (v *NullableEnsemblingJobMeta) Set(val *EnsemblingJobMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableEnsemblingJobMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableEnsemblingJobMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnsemblingJobMeta(val *EnsemblingJobMeta) *NullableEnsemblingJobMeta {
	return &NullableEnsemblingJobMeta{value: val, isSet: true}
}

func (v NullableEnsemblingJobMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnsemblingJobMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


