# Port number Turing API server listens to
Port: 8080

# Enable Cross-Origin Requests (CORS) for the following origins
AllowedOrigins:
- "*"

# Configuration to enable authorization using ORY Keto server
AuthConfig:
  Enabled: false
  # ORY Keto auth server URL: https://github.com/ory/keto
  URL: http://example.com/auth

# Batch runner configurations
BatchRunnerConfig:
  # How long to wait before running the runners again.
  TimeInterval: 10s

# Postgresql connection and credentials
DbConfig:
  Host: localhost
  Port: 5432
  Database: turing
  User: dbuser
  Password: dbpassword

# Turing router deployment context
DeployConfig:
  EnvironmentType: dev
  GcpProject: gcp-project-001
  Timeout: "3m"
  DeletionTimeout: "1m"
  MaxCPU: "4"
  MaxMemory: "8Gi"

# New Relic Config
NewRelic:
  Enabled: true
  AppName: turing
  License: <your very secret license key here>
  IgnoreStatusCodes: 
    - 400
    - 401
    - 403
    - 404
    - 405
    - 412

# Ensembling job config
EnsemblingJobConfig:
  DefaultEnvironment: dev
  RecordsToProcessInOneIteration: 10
  MaxRetryCount: 3
  ImageBuilderConfig:
    Registry: ghcr.io
    BaseImageRef: ghcr.io/gojek/turing/batch-ensembler:latest
    BuildNamespace: default
    BuildContextURI: git://github.com/gojek/turing.git#refs/heads/master
    DockerfileFilePath: engines/batch-ensembler/app.Dockerfile
    BuildTimeoutDuration: 10m
  KanikoConfig:
    Image: gcr.io/kaniko-project/executor
    ImageVersion: v1.5.2
    ResourceRequestsLimits:
      Requests:
        CPU: "1"
        Memory: 1Gi
      Limits:
        CPU: "1"
        Memory: 1Gi
  DefaultConfigurations:
    SparkConfigAnnotations:
      "spark/spark.sql.execution.arrow.pyspark.enabled": "true"
    BatchEnsemblingJobResources:
      DriverCPURequest: "1"
      DriverMemoryRequest: "1Gi"
      ExecutorReplica: 2
      ExecutorCPURequest: "1"
      ExecutorMemoryRequest: "1Gi"

KubernetesLabelConfigs:
  # KubernetesLabelPrefix is the prefix used for tagging kubernetes components.
  # Default is an empty string which means your tags will look something like this:
  #   team: teen-titans
  #   stream: nile
  #   environment: dev
  #   orchestrator: turing
  #   app: my-model-app
  # With this setting, it will look something like this:
  #   gojek.com/team: teen-titans
  #   gojek.com/stream: nile
  #   gojek.com/environment: dev
  #   gojek.com/orchestrator: turing
  #   gojek.com/app: my-model-app
  LabelPrefix: "gojek.com/"
  Environment: dev

# Spark App config for running on Kubernetes
# This is specific to the environment that you Kubernetes cluster runs on.
SparkAppConfig:
  CorePerCPURequest: 1.5
  CPURequestToCPULimit: 1.25
  SparkVersion: "2.4.5"
  SubmissionFailureRetries: 3
  SubmissionFailureRetryInterval: 10
  FailureRetries: 3
  FailureRetryInterval: 10
  PythonVersion: "3"
  TTLSecond: 86400

# Turing router configuration
RouterDefaults:
  Image: ghcr.io/gojek/turing:latest
  FiberDebugLogEnabled: false
  CustomMetricsEnabled: false
  JaegerEnabled: false
  JaegerCollectorEndpoint: http://jaeger-tracing-collector.example.com:14268/api/traces
  LogLevel: INFO

  # Fluentd log forwarder configuration that can be used in Turing router
  FluentdConfig:
    FlushIntervalSeconds: 90
    Image: ghcr.io/gojek/fluentd:latest
    Tag: turing-result.log

  # Experiment is a map of experiment engine name to configuration object
  # Note: the following config just an example and will not work as of Nov 2020
  Experiment:
    planout:
      endpoint: http://planout.example.com
      timeout: 3s
    optimizely:
      endpoint: https://api.optimizely.com/v2
      timeout: 5s

# Sentry application monitoring service configuration
# https://docs.sentry.io/product/sentry-basics/dsn-explainer/
Sentry:
  Enabled: false
  DSN: https://public@sentry.example.com/1
  Labels: 
    labelkey1: labelvalue1
    labelkey2: labelvalue2

# Vault server configuration. Vault is required by Turing API to retrieve
# Kubernetes cluster credentials where the Turing router will be deployed.
VaultConfig:
  Address: http://localhost:8200
  Token: root

# Encryption key used by Turing API server when saving user-sensitive info
# such as user provided service account keys
TuringEncryptionKey: secret

# Alert configuration for Turing router 
AlertConfig:
  Enabled: false
  # Persist alert configuration in a GitLab repo with pre-configured 
  # continuous integration jobs that will register and activate the alerts
  # to a backend alert server
  GitLab:
    BaseURL: https://gitlab.com
    Branch: master
    PathPrefix: turing
    ProjectID: "1"
    Token: gitlabtoken
  # PlaybookURL is the URL that contains documentation on how to resolve triggered alerts
  PlaybookURL: https://example.com
  # DashboardURLTemplate is a template for grafana dashboard URL that shows router metrics.
  # The template accepts go-template format and will be executed with dashboardURLValue which has
  # the following fields: Environment, Cluster, Project, Router, Revision.
  DashboardURLTemplate: https://grafana.example.com/graph/d/hash/dashboard?var-cluster={{ .Cluster }}&var-project={{ .Project }}&var-experiment={{ .Router }}

# MLP API access configuration. Turing uses MLP API to get projects
# and environments associated with the Turing router: https://github.com/gojek/mlp
MLPConfig:
  MLPURL: http://api.mlp.example.com
  MerlinURL: http://api.merlin.example.com
  MLPEncryptionKey: secret

# Turing UI configuration to set how the UI assets will be served
TuringUIConfig:
  AppDirectory: /ui
  Homepage: /turing
 
# File path to find OpenAPI v3 specification file
SwaggerFile: "api/openapi.yaml"

# Experiment is a map of experiment engine name to configuration object.
# This will be used to configure the corresponding experiment engines.
# Note: the following config just an example and will not work as of Nov 2020
Experiment:
  optimizely:
    token: mytoken
  planOut:
    config:
      op: seq
      seq:
      - op: set
        var: variant
        value:
          choices:
            op: array
            values:
            - control
            - treatment-1
          unit:
            op: get
            var: customer
          op: uniformChoice
