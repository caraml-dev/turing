// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/turing/api/turing/models"

	webhooks "github.com/caraml-dev/mlp/api/pkg/webhooks"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// TriggerEnsemblerEvent provides a mock function with given fields: ctx, eventType, ensembler
func (_m *Client) TriggerEnsemblerEvent(ctx context.Context, eventType webhooks.EventType, ensembler models.EnsemblerLike) error {
	ret := _m.Called(ctx, eventType, ensembler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, models.EnsemblerLike) error); ok {
		r0 = rf(ctx, eventType, ensembler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerRouterEvent provides a mock function with given fields: ctx, eventType, router
func (_m *Client) TriggerRouterEvent(ctx context.Context, eventType webhooks.EventType, router *models.Router) error {
	ret := _m.Called(ctx, eventType, router)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webhooks.EventType, *models.Router) error); ok {
		r0 = rf(ctx, eventType, router)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
