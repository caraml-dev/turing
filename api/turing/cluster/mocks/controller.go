// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cluster "github.com/gojek/turing/api/turing/cluster"

	corev1 "k8s.io/api/core/v1"

	io "io"

	mock "github.com/stretchr/testify/mock"

	rbacv1 "k8s.io/api/rbac/v1"

	time "time"

	v1 "k8s.io/api/batch/v1"

	v1beta2 "github.com/GoogleCloudPlatform/spark-on-k8s-operator/pkg/apis/sparkoperator.k8s.io/v1beta2"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// ApplyConfigMap provides a mock function with given fields: namespace, configMap
func (_m *Controller) ApplyConfigMap(namespace string, configMap *cluster.ConfigMap) error {
	ret := _m.Called(namespace, configMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *cluster.ConfigMap) error); ok {
		r0 = rf(namespace, configMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyIstioVirtualService provides a mock function with given fields: ctx, routerEndpoint
func (_m *Controller) ApplyIstioVirtualService(ctx context.Context, routerEndpoint *cluster.VirtualService) error {
	ret := _m.Called(ctx, routerEndpoint)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.VirtualService) error); ok {
		r0 = rf(ctx, routerEndpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyPersistentVolumeClaim provides a mock function with given fields: ctx, namespace, pvc
func (_m *Controller) ApplyPersistentVolumeClaim(ctx context.Context, namespace string, pvc *cluster.PersistentVolumeClaim) error {
	ret := _m.Called(ctx, namespace, pvc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *cluster.PersistentVolumeClaim) error); ok {
		r0 = rf(ctx, namespace, pvc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJob provides a mock function with given fields: namespace, job
func (_m *Controller) CreateJob(namespace string, job cluster.Job) (*v1.Job, error) {
	ret := _m.Called(namespace, job)

	var r0 *v1.Job
	if rf, ok := ret.Get(0).(func(string, cluster.Job) *v1.Job); ok {
		r0 = rf(namespace, job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, cluster.Job) error); ok {
		r1 = rf(namespace, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: name
func (_m *Controller) CreateNamespace(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRole provides a mock function with given fields: namespace, roleName, policyRules
func (_m *Controller) CreateRole(namespace string, roleName string, policyRules []rbacv1.PolicyRule) (*rbacv1.Role, error) {
	ret := _m.Called(namespace, roleName, policyRules)

	var r0 *rbacv1.Role
	if rf, ok := ret.Get(0).(func(string, string, []rbacv1.PolicyRule) *rbacv1.Role); ok {
		r0 = rf(namespace, roleName, policyRules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []rbacv1.PolicyRule) error); ok {
		r1 = rf(namespace, roleName, policyRules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoleBinding provides a mock function with given fields: namespace, roleBindingName, serviceAccountName, roleName
func (_m *Controller) CreateRoleBinding(namespace string, roleBindingName string, serviceAccountName string, roleName string) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(namespace, roleBindingName, serviceAccountName, roleName)

	var r0 *rbacv1.RoleBinding
	if rf, ok := ret.Get(0).(func(string, string, string, string) *rbacv1.RoleBinding); ok {
		r0 = rf(namespace, roleBindingName, serviceAccountName, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(namespace, roleBindingName, serviceAccountName, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: ctx, secret
func (_m *Controller) CreateSecret(ctx context.Context, secret *cluster.Secret) error {
	ret := _m.Called(ctx, secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateServiceAccount provides a mock function with given fields: namespace, serviceAccountName
func (_m *Controller) CreateServiceAccount(namespace string, serviceAccountName string) (*corev1.ServiceAccount, error) {
	ret := _m.Called(namespace, serviceAccountName)

	var r0 *corev1.ServiceAccount
	if rf, ok := ret.Get(0).(func(string, string) *corev1.ServiceAccount); ok {
		r0 = rf(namespace, serviceAccountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, serviceAccountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSparkApplication provides a mock function with given fields: namespace, request
func (_m *Controller) CreateSparkApplication(namespace string, request *cluster.CreateSparkRequest) (*v1beta2.SparkApplication, error) {
	ret := _m.Called(namespace, request)

	var r0 *v1beta2.SparkApplication
	if rf, ok := ret.Get(0).(func(string, *cluster.CreateSparkRequest) *v1beta2.SparkApplication); ok {
		r0 = rf(namespace, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta2.SparkApplication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *cluster.CreateSparkRequest) error); ok {
		r1 = rf(namespace, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigMap provides a mock function with given fields: name, namespace
func (_m *Controller) DeleteConfigMap(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIstioVirtualService provides a mock function with given fields: svcName, namespace, timeout
func (_m *Controller) DeleteIstioVirtualService(svcName string, namespace string, timeout time.Duration) error {
	ret := _m.Called(svcName, namespace, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(svcName, namespace, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJob provides a mock function with given fields: namespace, jobName
func (_m *Controller) DeleteJob(namespace string, jobName string) error {
	ret := _m.Called(namespace, jobName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, jobName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKnativeService provides a mock function with given fields: svcName, namespace, timeout
func (_m *Controller) DeleteKnativeService(svcName string, namespace string, timeout time.Duration) error {
	ret := _m.Called(svcName, namespace, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(svcName, namespace, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKubernetesService provides a mock function with given fields: svcName, namespace, timeout
func (_m *Controller) DeleteKubernetesService(svcName string, namespace string, timeout time.Duration) error {
	ret := _m.Called(svcName, namespace, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(svcName, namespace, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePersistentVolumeClaim provides a mock function with given fields: pvcName, namespace
func (_m *Controller) DeletePersistentVolumeClaim(pvcName string, namespace string) error {
	ret := _m.Called(pvcName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(pvcName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: secretName, namespace
func (_m *Controller) DeleteSecret(secretName string, namespace string) error {
	ret := _m.Called(secretName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(secretName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSparkApplication provides a mock function with given fields: namespace, appName
func (_m *Controller) DeleteSparkApplication(namespace string, appName string) error {
	ret := _m.Called(namespace, appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployKnativeService provides a mock function with given fields: ctx, svc
func (_m *Controller) DeployKnativeService(ctx context.Context, svc *cluster.KnativeService) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.KnativeService) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployKubernetesService provides a mock function with given fields: ctx, svc
func (_m *Controller) DeployKubernetesService(ctx context.Context, svc *cluster.KubernetesService) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.KubernetesService) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJob provides a mock function with given fields: namespace, jobName
func (_m *Controller) GetJob(namespace string, jobName string) (*v1.Job, error) {
	ret := _m.Called(namespace, jobName)

	var r0 *v1.Job
	if rf, ok := ret.Get(0).(func(string, string) *v1.Job); ok {
		r0 = rf(namespace, jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKnativeServiceURL provides a mock function with given fields: svcName, namespace
func (_m *Controller) GetKnativeServiceURL(svcName string, namespace string) string {
	ret := _m.Called(svcName, namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(svcName, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSparkApplication provides a mock function with given fields: namespace, appName
func (_m *Controller) GetSparkApplication(namespace string, appName string) (*v1beta2.SparkApplication, error) {
	ret := _m.Called(namespace, appName)

	var r0 *v1beta2.SparkApplication
	if rf, ok := ret.Get(0).(func(string, string) *v1beta2.SparkApplication); ok {
		r0 = rf(namespace, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta2.SparkApplication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodLogs provides a mock function with given fields: namespace, podName, opts
func (_m *Controller) ListPodLogs(namespace string, podName string, opts *corev1.PodLogOptions) (io.ReadCloser, error) {
	ret := _m.Called(namespace, podName, opts)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string, *corev1.PodLogOptions) io.ReadCloser); ok {
		r0 = rf(namespace, podName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *corev1.PodLogOptions) error); ok {
		r1 = rf(namespace, podName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: namespace, labelSelector
func (_m *Controller) ListPods(namespace string, labelSelector string) (*corev1.PodList, error) {
	ret := _m.Called(namespace, labelSelector)

	var r0 *corev1.PodList
	if rf, ok := ret.Get(0).(func(string, string) *corev1.PodList); ok {
		r0 = rf(namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
