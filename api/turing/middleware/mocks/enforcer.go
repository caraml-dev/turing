// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	types "github.com/gojek/mlp/api/pkg/authz/enforcer/types"
	mock "github.com/stretchr/testify/mock"
)

// Enforcer is an autogenerated mock type for the Enforcer type
type Enforcer struct {
	mock.Mock
}

// Enforce provides a mock function with given fields: user, resource, action
func (_m *Enforcer) Enforce(user string, resource string, action string) (*bool, error) {
	ret := _m.Called(user, resource, action)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(string, string, string) *bool); ok {
		r0 = rf(user, resource, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(user, resource, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterAuthorizedResource provides a mock function with given fields: user, resources, action
func (_m *Enforcer) FilterAuthorizedResource(user string, resources []string, action string) ([]string, error) {
	ret := _m.Called(user, resources, action)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, []string, string) []string); ok {
		r0 = rf(user, resources, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, string) error); ok {
		r1 = rf(user, resources, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: policyName
func (_m *Enforcer) GetPolicy(policyName string) (*types.Policy, error) {
	ret := _m.Called(policyName)

	var r0 *types.Policy
	if rf, ok := ret.Get(0).(func(string) *types.Policy); ok {
		r0 = rf(policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: roleName
func (_m *Enforcer) GetRole(roleName string) (*types.Role, error) {
	ret := _m.Called(roleName)

	var r0 *types.Role
	if rf, ok := ret.Get(0).(func(string) *types.Role); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPolicy provides a mock function with given fields: policyName, roles, users, resources, actions
func (_m *Enforcer) UpsertPolicy(policyName string, roles []string, users []string, resources []string, actions []string) (*types.Policy, error) {
	ret := _m.Called(policyName, roles, users, resources, actions)

	var r0 *types.Policy
	if rf, ok := ret.Get(0).(func(string, []string, []string, []string, []string) *types.Policy); ok {
		r0 = rf(policyName, roles, users, resources, actions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, []string, []string, []string) error); ok {
		r1 = rf(policyName, roles, users, resources, actions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRole provides a mock function with given fields: roleName, users
func (_m *Enforcer) UpsertRole(roleName string, users []string) (*types.Role, error) {
	ret := _m.Called(roleName, users)

	var r0 *types.Role
	if rf, ok := ret.Get(0).(func(string, []string) *types.Role); ok {
		r0 = rf(roleName, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(roleName, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
