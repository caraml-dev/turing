// Code generated by MockGen. DO NOT EDIT.
// Source: router_versions_repository.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/caraml-dev/turing/api/turing/models"
)

// MockRouterVersionsRepository is a mock of RouterVersionsRepository interface
type MockRouterVersionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRouterVersionsRepositoryMockRecorder
}

// MockRouterVersionsRepositoryMockRecorder is the mock recorder for MockRouterVersionsRepository
type MockRouterVersionsRepositoryMockRecorder struct {
	mock *MockRouterVersionsRepository
}

// NewMockRouterVersionsRepository creates a new mock instance
func NewMockRouterVersionsRepository(ctrl *gomock.Controller) *MockRouterVersionsRepository {
	mock := &MockRouterVersionsRepository{ctrl: ctrl}
	mock.recorder = &MockRouterVersionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouterVersionsRepository) EXPECT() *MockRouterVersionsRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockRouterVersionsRepository) List(routerID models.ID) ([]*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", routerID)
	ret0, _ := ret[0].([]*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRouterVersionsRepositoryMockRecorder) List(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouterVersionsRepository)(nil).List), routerID)
}

// ListByStatus mocks base method
func (m *MockRouterVersionsRepository) ListByStatus(routerID models.ID, status models.RouterVersionStatus) ([]*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByStatus", routerID, status)
	ret0, _ := ret[0].([]*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByStatus indicates an expected call of ListByStatus
func (mr *MockRouterVersionsRepositoryMockRecorder) ListByStatus(routerID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByStatus", reflect.TypeOf((*MockRouterVersionsRepository)(nil).ListByStatus), routerID, status)
}

// Save mocks base method
func (m *MockRouterVersionsRepository) Save(routerVersion *models.RouterVersion) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", routerVersion)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockRouterVersionsRepositoryMockRecorder) Save(routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRouterVersionsRepository)(nil).Save), routerVersion)
}

// FindByID mocks base method
func (m *MockRouterVersionsRepository) FindByID(routerVersionID models.ID) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", routerVersionID)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRouterVersionsRepositoryMockRecorder) FindByID(routerVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRouterVersionsRepository)(nil).FindByID), routerVersionID)
}

// FindByRouterIDAndVersion mocks base method
func (m *MockRouterVersionsRepository) FindByRouterIDAndVersion(routerID models.ID, version uint) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRouterIDAndVersion", routerID, version)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRouterIDAndVersion indicates an expected call of FindByRouterIDAndVersion
func (mr *MockRouterVersionsRepositoryMockRecorder) FindByRouterIDAndVersion(routerID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRouterIDAndVersion", reflect.TypeOf((*MockRouterVersionsRepository)(nil).FindByRouterIDAndVersion), routerID, version)
}

// FindLatestVersion mocks base method
func (m *MockRouterVersionsRepository) FindLatestVersion(routerID models.ID) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestVersion", routerID)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestVersion indicates an expected call of FindLatestVersion
func (mr *MockRouterVersionsRepositoryMockRecorder) FindLatestVersion(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestVersion", reflect.TypeOf((*MockRouterVersionsRepository)(nil).FindLatestVersion), routerID)
}

// Delete mocks base method
func (m *MockRouterVersionsRepository) Delete(routerVersion *models.RouterVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", routerVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRouterVersionsRepositoryMockRecorder) Delete(routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouterVersionsRepository)(nil).Delete), routerVersion)
}
