// Code generated by MockGen. DO NOT EDIT.
// Source: routers_repository.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/caraml-dev/turing/api/turing/models"
)

// MockRoutersRepository is a mock of RoutersRepository interface
type MockRoutersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoutersRepositoryMockRecorder
}

// MockRoutersRepositoryMockRecorder is the mock recorder for MockRoutersRepository
type MockRoutersRepositoryMockRecorder struct {
	mock *MockRoutersRepository
}

// NewMockRoutersRepository creates a new mock instance
func NewMockRoutersRepository(ctrl *gomock.Controller) *MockRoutersRepository {
	mock := &MockRoutersRepository{ctrl: ctrl}
	mock.recorder = &MockRoutersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutersRepository) EXPECT() *MockRoutersRepositoryMockRecorder {
	return m.recorder
}

// CountRoutersByCurrentVersionID mocks base method
func (m *MockRoutersRepository) CountRoutersByCurrentVersionID(routerVersionID models.ID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRoutersByCurrentVersionID", routerVersionID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountRoutersByCurrentVersionID indicates an expected call of CountRoutersByCurrentVersionID
func (mr *MockRoutersRepositoryMockRecorder) CountRoutersByCurrentVersionID(routerVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRoutersByCurrentVersionID", reflect.TypeOf((*MockRoutersRepository)(nil).CountRoutersByCurrentVersionID), routerVersionID)
}
