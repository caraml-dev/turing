// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/user/Documents/Code/github/test_refactoring/turing/api/turing/service/mlp_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/caraml-dev/turing/api/turing/models"
	client "github.com/gojek/merlin/client"
	client0 "github.com/gojek/mlp/api/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMLPService is a mock of MLPService interface
type MockMLPService struct {
	ctrl     *gomock.Controller
	recorder *MockMLPServiceMockRecorder
}

// MockMLPServiceMockRecorder is the mock recorder for MockMLPService
type MockMLPServiceMockRecorder struct {
	mock *MockMLPService
}

// NewMockMLPService creates a new mock instance
func NewMockMLPService(ctrl *gomock.Controller) *MockMLPService {
	mock := &MockMLPService{ctrl: ctrl}
	mock.recorder = &MockMLPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMLPService) EXPECT() *MockMLPServiceMockRecorder {
	return m.recorder
}

// GetEnvironments mocks base method
func (m *MockMLPService) GetEnvironments() ([]client.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments")
	ret0, _ := ret[0].([]client.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments
func (mr *MockMLPServiceMockRecorder) GetEnvironments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockMLPService)(nil).GetEnvironments))
}

// GetEnvironment mocks base method
func (m *MockMLPService) GetEnvironment(name string) (*client.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", name)
	ret0, _ := ret[0].(*client.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockMLPServiceMockRecorder) GetEnvironment(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockMLPService)(nil).GetEnvironment), name)
}

// GetProjects mocks base method
func (m *MockMLPService) GetProjects(name string) ([]client0.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", name)
	ret0, _ := ret[0].([]client0.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockMLPServiceMockRecorder) GetProjects(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockMLPService)(nil).GetProjects), name)
}

// GetProject mocks base method
func (m *MockMLPService) GetProject(id models.ID) (*client0.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", id)
	ret0, _ := ret[0].(*client0.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockMLPServiceMockRecorder) GetProject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockMLPService)(nil).GetProject), id)
}

// GetSecret mocks base method
func (m *MockMLPService) GetSecret(projectID models.ID, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", projectID, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockMLPServiceMockRecorder) GetSecret(projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockMLPService)(nil).GetSecret), projectID, name)
}
