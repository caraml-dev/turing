// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/user/Documents/Code/github/test_refactoring/turing/api/turing/service/router_versions_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/caraml-dev/turing/api/turing/models"
	client "github.com/gojek/mlp/api/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRouterVersionsService is a mock of RouterVersionsService interface
type MockRouterVersionsService struct {
	ctrl     *gomock.Controller
	recorder *MockRouterVersionsServiceMockRecorder
}

// MockRouterVersionsServiceMockRecorder is the mock recorder for MockRouterVersionsService
type MockRouterVersionsServiceMockRecorder struct {
	mock *MockRouterVersionsService
}

// NewMockRouterVersionsService creates a new mock instance
func NewMockRouterVersionsService(ctrl *gomock.Controller) *MockRouterVersionsService {
	mock := &MockRouterVersionsService{ctrl: ctrl}
	mock.recorder = &MockRouterVersionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouterVersionsService) EXPECT() *MockRouterVersionsServiceMockRecorder {
	return m.recorder
}

// ListByRouterID mocks base method
func (m *MockRouterVersionsService) ListByRouterID(routerID models.ID) ([]*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRouterID", routerID)
	ret0, _ := ret[0].([]*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRouterID indicates an expected call of ListByRouterID
func (mr *MockRouterVersionsServiceMockRecorder) ListByRouterID(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRouterID", reflect.TypeOf((*MockRouterVersionsService)(nil).ListByRouterID), routerID)
}

// ListByRouterIDAndStatus mocks base method
func (m *MockRouterVersionsService) ListByRouterIDAndStatus(routerID models.ID, status models.RouterVersionStatus) ([]*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRouterIDAndStatus", routerID, status)
	ret0, _ := ret[0].([]*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRouterIDAndStatus indicates an expected call of ListByRouterIDAndStatus
func (mr *MockRouterVersionsServiceMockRecorder) ListByRouterIDAndStatus(routerID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRouterIDAndStatus", reflect.TypeOf((*MockRouterVersionsService)(nil).ListByRouterIDAndStatus), routerID, status)
}

// FindByID mocks base method
func (m *MockRouterVersionsService) FindByID(routerVersionID models.ID) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", routerVersionID)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRouterVersionsServiceMockRecorder) FindByID(routerVersionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRouterVersionsService)(nil).FindByID), routerVersionID)
}

// FindByRouterIDAndVersion mocks base method
func (m *MockRouterVersionsService) FindByRouterIDAndVersion(routerID models.ID, version uint) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRouterIDAndVersion", routerID, version)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRouterIDAndVersion indicates an expected call of FindByRouterIDAndVersion
func (mr *MockRouterVersionsServiceMockRecorder) FindByRouterIDAndVersion(routerID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRouterIDAndVersion", reflect.TypeOf((*MockRouterVersionsService)(nil).FindByRouterIDAndVersion), routerID, version)
}

// FindLatestVersionByRouterID mocks base method
func (m *MockRouterVersionsService) FindLatestVersionByRouterID(routerID models.ID) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestVersionByRouterID", routerID)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestVersionByRouterID indicates an expected call of FindLatestVersionByRouterID
func (mr *MockRouterVersionsServiceMockRecorder) FindLatestVersionByRouterID(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestVersionByRouterID", reflect.TypeOf((*MockRouterVersionsService)(nil).FindLatestVersionByRouterID), routerID)
}

// Create mocks base method
func (m *MockRouterVersionsService) Create(routerVersion *models.RouterVersion) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", routerVersion)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRouterVersionsServiceMockRecorder) Create(routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRouterVersionsService)(nil).Create), routerVersion)
}

// Update mocks base method
func (m *MockRouterVersionsService) Update(routerVersion *models.RouterVersion) (*models.RouterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", routerVersion)
	ret0, _ := ret[0].(*models.RouterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRouterVersionsServiceMockRecorder) Update(routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouterVersionsService)(nil).Update), routerVersion)
}

// Delete mocks base method
func (m *MockRouterVersionsService) Delete(routerVersion *models.RouterVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", routerVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRouterVersionsServiceMockRecorder) Delete(routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouterVersionsService)(nil).Delete), routerVersion)
}

// Deploy mocks base method
func (m *MockRouterVersionsService) Deploy(project *client.Project, router *models.Router, routerVersion *models.RouterVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", project, router, routerVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockRouterVersionsServiceMockRecorder) Deploy(project, router, routerVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockRouterVersionsService)(nil).Deploy), project, router, routerVersion)
}
