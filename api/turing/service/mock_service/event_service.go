// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/user/Documents/Code/github/test_refactoring/turing/api/turing/service/event_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/caraml-dev/turing/api/turing/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventService is a mock of EventService interface
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// ListEvents mocks base method
func (m *MockEventService) ListEvents(routerID int) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", routerID)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents
func (mr *MockEventServiceMockRecorder) ListEvents(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventService)(nil).ListEvents), routerID)
}

// ClearEvents mocks base method
func (m *MockEventService) ClearEvents(routerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearEvents", routerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearEvents indicates an expected call of ClearEvents
func (mr *MockEventServiceMockRecorder) ClearEvents(routerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEvents", reflect.TypeOf((*MockEventService)(nil).ClearEvents), routerID)
}

// Save mocks base method
func (m *MockEventService) Save(event *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockEventServiceMockRecorder) Save(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEventService)(nil).Save), event)
}
