// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CryptoService is an autogenerated mock type for the CryptoService type
type CryptoService struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: ciphertext
func (_m *CryptoService) Decrypt(ciphertext string) (string, error) {
	ret := _m.Called(ciphertext)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ciphertext)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ciphertext)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: plaintext
func (_m *CryptoService) Encrypt(plaintext string) (string, error) {
	ret := _m.Called(plaintext)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plaintext)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plaintext)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCryptoService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCryptoService creates a new instance of CryptoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCryptoService(t mockConstructorTestingTNewCryptoService) *CryptoService {
	mock := &CryptoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
