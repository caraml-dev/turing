// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	service "github.com/caraml-dev/turing/api/turing/service"
	mock "github.com/stretchr/testify/mock"
)

// PodLogService is an autogenerated mock type for the PodLogService type
type PodLogService struct {
	mock.Mock
}

// ListPodLogs provides a mock function with given fields: request
func (_m *PodLogService) ListPodLogs(request service.PodLogRequest) ([]*service.PodLog, error) {
	ret := _m.Called(request)

	var r0 []*service.PodLog
	var r1 error
	if rf, ok := ret.Get(0).(func(service.PodLogRequest) ([]*service.PodLog, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(service.PodLogRequest) []*service.PodLog); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.PodLog)
		}
	}

	if rf, ok := ret.Get(1).(func(service.PodLogRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPodLogService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPodLogService creates a new instance of PodLogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPodLogService(t mockConstructorTestingTNewPodLogService) *PodLogService {
	mock := &PodLogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
