// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/caraml-dev/turing/api/turing/models"
	mock "github.com/stretchr/testify/mock"
)

// EventService is an autogenerated mock type for the EventService type
type EventService struct {
	mock.Mock
}

// ClearEvents provides a mock function with given fields: routerID
func (_m *EventService) ClearEvents(routerID int) error {
	ret := _m.Called(routerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(routerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEvents provides a mock function with given fields: routerID
func (_m *EventService) ListEvents(routerID int) ([]*models.Event, error) {
	ret := _m.Called(routerID)

	var r0 []*models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*models.Event, error)); ok {
		return rf(routerID)
	}
	if rf, ok := ret.Get(0).(func(int) []*models.Event); ok {
		r0 = rf(routerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(routerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: event
func (_m *EventService) Save(event *models.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEventService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventService creates a new instance of EventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventService(t mockConstructorTestingTNewEventService) *EventService {
	mock := &EventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
