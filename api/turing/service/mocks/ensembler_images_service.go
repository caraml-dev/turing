// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	client "github.com/caraml-dev/mlp/api/client"
	imagebuilder "github.com/caraml-dev/turing/api/turing/imagebuilder"
	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/turing/api/turing/models"
)

// EnsemblerImagesService is an autogenerated mock type for the EnsemblerImagesService type
type EnsemblerImagesService struct {
	mock.Mock
}

// BuildImage provides a mock function with given fields: project, ensembler, runnerType
func (_m *EnsemblerImagesService) BuildImage(project *client.Project, ensembler *models.PyFuncEnsembler, runnerType models.EnsemblerRunnerType) error {
	ret := _m.Called(project, ensembler, runnerType)

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Project, *models.PyFuncEnsembler, models.EnsemblerRunnerType) error); ok {
		r0 = rf(project, ensembler, runnerType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListImages provides a mock function with given fields: project, ensembler, runnerType
func (_m *EnsemblerImagesService) ListImages(project *client.Project, ensembler *models.PyFuncEnsembler, runnerType models.EnsemblerRunnerType) ([]imagebuilder.EnsemblerImage, error) {
	ret := _m.Called(project, ensembler, runnerType)

	var r0 []imagebuilder.EnsemblerImage
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Project, *models.PyFuncEnsembler, models.EnsemblerRunnerType) ([]imagebuilder.EnsemblerImage, error)); ok {
		return rf(project, ensembler, runnerType)
	}
	if rf, ok := ret.Get(0).(func(*client.Project, *models.PyFuncEnsembler, models.EnsemblerRunnerType) []imagebuilder.EnsemblerImage); ok {
		r0 = rf(project, ensembler, runnerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]imagebuilder.EnsemblerImage)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Project, *models.PyFuncEnsembler, models.EnsemblerRunnerType) error); ok {
		r1 = rf(project, ensembler, runnerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEnsemblerImagesService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEnsemblerImagesService creates a new instance of EnsemblerImagesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEnsemblerImagesService(t mockConstructorTestingTNewEnsemblerImagesService) *EnsemblerImagesService {
	mock := &EnsemblerImagesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
