// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gojek/turing/api/turing/models"
	mock "github.com/stretchr/testify/mock"

	service "github.com/gojek/turing/api/turing/service"
)

// EnsemblingJobService is an autogenerated mock type for the EnsemblingJobService type
type EnsemblingJobService struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: id, options
func (_m *EnsemblingJobService) FindByID(id models.ID, options service.EnsemblingJobFindByIDOptions) (*models.EnsemblingJob, error) {
	ret := _m.Called(id, options)

	var r0 *models.EnsemblingJob
	if rf, ok := ret.Get(0).(func(models.ID, service.EnsemblingJobFindByIDOptions) *models.EnsemblingJob); ok {
		r0 = rf(id, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EnsemblingJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, service.EnsemblingJobFindByIDOptions) error); ok {
		r1 = rf(id, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPendingJobs provides a mock function with given fields: limit
func (_m *EnsemblingJobService) FindPendingJobs(limit int) ([]*models.EnsemblingJob, error) {
	ret := _m.Called(limit)

	var r0 []*models.EnsemblingJob
	if rf, ok := ret.Get(0).(func(int) []*models.EnsemblingJob); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.EnsemblingJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ensembler
func (_m *EnsemblingJobService) Save(ensembler *models.EnsemblingJob) error {
	ret := _m.Called(ensembler)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.EnsemblingJob) error); ok {
		r0 = rf(ensembler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJobStatus provides a mock function with given fields: id, status, errString
func (_m *EnsemblingJobService) UpdateJobStatus(id models.ID, status models.State, errString string) error {
	ret := _m.Called(id, status, errString)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ID, models.State, string) error); ok {
		r0 = rf(id, status, errString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
