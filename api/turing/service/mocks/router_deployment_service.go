// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	client "github.com/gojek/mlp/api/client"
	mock "github.com/stretchr/testify/mock"

	models "github.com/caraml-dev/turing/api/turing/models"
)

// RouterDeploymentService is an autogenerated mock type for the RouterDeploymentService type
type RouterDeploymentService struct {
	mock.Mock
}

// DeployOrRollbackRouter provides a mock function with given fields: project, router, routerVersion
func (_m *RouterDeploymentService) DeployOrRollbackRouter(project *client.Project, router *models.Router, routerVersion *models.RouterVersion) error {
	ret := _m.Called(project, router, routerVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Project, *models.Router, *models.RouterVersion) error); ok {
		r0 = rf(project, router, routerVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndeployRouter provides a mock function with given fields: project, router
func (_m *RouterDeploymentService) UndeployRouter(project *client.Project, router *models.Router) error {
	ret := _m.Called(project, router)

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Project, *models.Router) error); ok {
		r0 = rf(project, router)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRouterDeploymentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouterDeploymentService creates a new instance of RouterDeploymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouterDeploymentService(t mockConstructorTestingTNewRouterDeploymentService) *RouterDeploymentService {
	mock := &RouterDeploymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
