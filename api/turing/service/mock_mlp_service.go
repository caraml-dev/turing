// Code generated by mockery v2.6.0. DO NOT EDIT.

package service

import (
	client "github.com/gojek/merlin/client"
	apiclient "github.com/gojek/mlp/api/client"

	mock "github.com/stretchr/testify/mock"

	models "github.com/gojek/turing/api/turing/models"
)

// MockMLPService is an autogenerated mock type for the MLPService type
type MockMLPService struct {
	mock.Mock
}

// GetEnvironment provides a mock function with given fields: name
func (_m *MockMLPService) GetEnvironment(name string) (*client.Environment, error) {
	ret := _m.Called(name)

	var r0 *client.Environment
	if rf, ok := ret.Get(0).(func(string) *client.Environment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironments provides a mock function with given fields:
func (_m *MockMLPService) GetEnvironments() ([]client.Environment, error) {
	ret := _m.Called()

	var r0 []client.Environment
	if rf, ok := ret.Get(0).(func() []client.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: id
func (_m *MockMLPService) GetProject(id models.ID) (*apiclient.Project, error) {
	ret := _m.Called(id)

	var r0 *apiclient.Project
	if rf, ok := ret.Get(0).(func(models.ID) *apiclient.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiclient.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjects provides a mock function with given fields: name
func (_m *MockMLPService) GetProjects(name string) ([]apiclient.Project, error) {
	ret := _m.Called(name)

	var r0 []apiclient.Project
	if rf, ok := ret.Get(0).(func(string) []apiclient.Project); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apiclient.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: projectID, name
func (_m *MockMLPService) GetSecret(projectID models.ID, name string) (string, error) {
	ret := _m.Called(projectID, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.ID, string) string); ok {
		r0 = rf(projectID, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.ID, string) error); ok {
		r1 = rf(projectID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
